<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>JBoss Tools Team: JBoss Tools 4.5.3.AM1 for Eclipse Oxygen.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.5.3.am1-for-oxygen.2.html</guid>
	<link>https://tools.jboss.org/blog/4.5.3.am1-for-oxygen.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.5.3.AM1 (Developer Milestone 1) build for Eclipse Oxygen.2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/oxygen/4.5.3.AM1.html&quot;&gt;JBoss Tools 4.5.3 AM1&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.5.3.AM1.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift&quot;&gt;&lt;/a&gt;OpenShift&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;minishift-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#minishift-server-adapter&quot;&gt;&lt;/a&gt;Minishift Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new server adapter has been added to support upstream Minishift.
      While the server adapter itself has limited functionality, it is able to start and stop the Minishift virtual machine via its minishift binary.
      From the Servers view, click &lt;strong&gt;New&lt;/strong&gt; and then type minishift, that will bring up a command to setup and/or launch the Minishift server adapter.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;minishift server adapter&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/minishift-server-adapter.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All you have to do is set the location of the minishift binary file, the type of virtualization hypervisor
      and an optional Minishift profile name.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;minishift server adapter1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/minishift-server-adapter1.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you’re finished, a new Minishift Server adapter will then be created and visible in the Servers view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;minishift server adapter2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/minishift-server-adapter2.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once the server is started, Docker and OpenShift connections should appear in their respective views, allowing the user to quickly create a new Openshift application and begin developing their AwesomeApp in a highly-replicatable environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;minishift server adapter3&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/minishift-server-adapter3.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;minishift server adapter4&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/minishift-server-adapter4.png&quot; width=&quot;600&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;new-shortcuts-in-fuse-integration-perspective&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#new-shortcuts-in-fuse-integration-perspective&quot;&gt;&lt;/a&gt;New shortcuts in Fuse Integration perspective&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Shortcuts for the Java, Launch, and Debug perspectives and basic navigation operations are now provided within the Fuse Integration perspective.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The result is a set of buttons in the Toolbar:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;New Toolbar action&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/newToolbarAction.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;All of the associated keyboard shortcuts are also available, such as Ctrl+Shift+T to open a Java Type.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;performance-improvement-loading-advanced-tab-for-camel-endpoints&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#performance-improvement-loading-advanced-tab-for-camel-endpoints&quot;&gt;&lt;/a&gt;Performance improvement: Loading Advanced tab for Camel Endpoints&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The loading time of the &quot;Advanced&quot; tab in the Properties view for Camel Endpoints is greatly improved.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Advanced Tab in Properties view&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/advancedTab.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Previously, in the case of Camel Components that have a lot of parameters, it took several seconds to load the Advanced tab. For example, for the File component, it would take ~3.5s. It now takes ~350ms. The load time has been reduced by a factor of 10. (See this interesting &lt;a href=&quot;https://www.nngroup.com/articles/response-times-3-important-limits/&quot;&gt;article on response time&lt;/a&gt;)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If you notice other places showing slow performance, you can file a report by using the &lt;a href=&quot;https://issues.jboss.org/browse/FUSETOOLS&quot;&gt;Fuse Tooling issue tracker&lt;/a&gt;. The Fuse Tooling team really appreciates your help. Your feedback contributes to our development priorities and improves the Fuse Tooling user experience.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 13 Feb 2018 20:44:40 +0000</pubDate>
</item>
<item>
	<title>Lorenzo Bettini: Eclipse tested with a few Gnome themes</title>
	<guid isPermaLink="false">http://www.lorenzobettini.it/?p=1048</guid>
	<link>http://www.lorenzobettini.it/2018/02/eclipse-tested-with-a-few-gnome-themes/</link>
	<description>&lt;p&gt;In this small blog post I’ll show how Eclipse looks like in Linux Gnome (Ubuntu 17.10) with a few Gnome themes.&lt;/p&gt;
&lt;p&gt;First of all, the default Ubuntu theme, &lt;strong&gt;Ambiance&lt;/strong&gt;, makes Eclipse look not very nice… see the icons, which are “packed” and “compressed” in the toolbar, not to mention the cut “Filter Files” textbox in the “Git Staging” view:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/02/eclipse-tested-with-a-few-gnome-themes/eclipse-ambiance/&quot; rel=&quot;attachment wp-att-1049&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1049&quot; height=&quot;375&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/02/eclipse-ambiance.png?resize=625%2C375&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Numix&lt;/strong&gt; has similar problems:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/02/eclipse-tested-with-a-few-gnome-themes/eclipse-numix/&quot; rel=&quot;attachment wp-att-1050&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1050&quot; height=&quot;375&quot; src=&quot;https://i2.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/02/eclipse-numix.png?resize=625%2C375&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adwaita&lt;/strong&gt;, (the default Gnome theme) instead makes it look great:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/02/eclipse-tested-with-a-few-gnome-themes/eclipse-adwaita/&quot; rel=&quot;attachment wp-att-1051&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1051&quot; height=&quot;375&quot; src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/02/eclipse-adwaita.png?resize=625%2C375&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The same holds for alternative themes; the following screenshots are based on &lt;strong&gt;Arc&lt;/strong&gt;, &lt;strong&gt;Pop&lt;/strong&gt; and &lt;strong&gt;Matcha&lt;/strong&gt;, respectively:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/02/eclipse-tested-with-a-few-gnome-themes/eclipse-arc/&quot; rel=&quot;attachment wp-att-1052&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1052&quot; height=&quot;375&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/02/eclipse-arc.png?resize=625%2C375&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/02/eclipse-tested-with-a-few-gnome-themes/eclipse-pop/&quot; rel=&quot;attachment wp-att-1053&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1053&quot; height=&quot;375&quot; src=&quot;https://i2.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/02/eclipse-pop.png?resize=625%2C375&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.lorenzobettini.it/2018/02/eclipse-tested-with-a-few-gnome-themes/eclipse-matcha/&quot; rel=&quot;attachment wp-att-1054&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-1054&quot; height=&quot;374&quot; src=&quot;https://i1.wp.com/www.lorenzobettini.it/wp-content/uploads/2018/02/eclipse-matcha.png?resize=625%2C374&quot; width=&quot;625&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, in the end, stay away from Ubuntu default theme &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;sociable&quot;&gt;&lt;div class=&quot;sociable_tagline&quot;&gt;Be Sociable, Share!&lt;/div&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://twitter.com/intent/tweet?text=Eclipse%20tested%20with%20a%20few%20Gnome%20themes%20-%20http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F%20&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Twitter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.facebook.com/share.php?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;t=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;https://mail.google.com/mail/?view=cm&amp;amp;fs=1&amp;amp;to&amp;amp;su=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;body=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;ui=2&amp;amp;tf=1&amp;amp;shva=1&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;email&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; rel=&quot;nofollow&quot; title=&quot;Add to favorites - doesn't work in Chrome&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.stumbleupon.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;StumbleUpon&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://delicious.com/post?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;notes=In%20this%20small%20blog%20post%20I%27ll%20show%20how%20Eclipse%20looks%20like%20in%20Linux%20Gnome%20%28Ubuntu%2017.10%29%20with%20a%20few%20Gnome%20themes.%0D%0A%0D%0AFirst%20of%20all%2C%20the%20default%20Ubuntu%20theme%2C%20Ambiance%2C%20makes%20Eclipse%20look%20not%20very%20nice...%20see%20the%20icons%2C%20which%20are%20%22packed%22%20and%20%22compressed&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Delicious&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/reader/link?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;srcURL=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;srcTitle=Lorenzo+Bettini+My+Home+Page&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Reader&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.linkedin.com/shareArticle?mini=true&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;source=Lorenzo+Bettini+My+Home+Page&amp;amp;summary=In%20this%20small%20blog%20post%20I%27ll%20show%20how%20Eclipse%20looks%20like%20in%20Linux%20Gnome%20%28Ubuntu%2017.10%29%20with%20a%20few%20Gnome%20themes.%0D%0A%0D%0AFirst%20of%20all%2C%20the%20default%20Ubuntu%20theme%2C%20Ambiance%2C%20makes%20Eclipse%20look%20not%20very%20nice...%20see%20the%20icons%2C%20which%20are%20%22packed%22%20and%20%22compressed&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;LinkedIn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.blinklist.com/index.php?Action=Blink/addblink.php&amp;amp;Url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;Title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&quot; rel=&quot;nofollow&quot; style=&quot;background-position: 0px 0px;&quot; target=&quot;_blank&quot; title=&quot;BlinkList&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a rel=&quot;nofollow&quot; style=&quot;cursor: pointer;&quot;&gt;&lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/more.png?w=625&quot; /&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div id=&quot;sociable-post-1048&quot; style=&quot;display: none;&quot;&gt;   

    &lt;div id=&quot;sociable&quot; style=&quot;display: block;&quot;&gt;



		&lt;div class=&quot;popup&quot;&gt;

			&lt;div class=&quot;content&quot;&gt;

				&lt;ul&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.myspace.com/Modules/PostTo/Pages/?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;t=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Myspace&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://digg.com/submit?phase=2&amp;amp;url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;bodytext=In%20this%20small%20blog%20post%20I%27ll%20show%20how%20Eclipse%20looks%20like%20in%20Linux%20Gnome%20%28Ubuntu%2017.10%29%20with%20a%20few%20Gnome%20themes.%0D%0A%0D%0AFirst%20of%20all%2C%20the%20default%20Ubuntu%20theme%2C%20Ambiance%2C%20makes%20Eclipse%20look%20not%20very%20nice...%20see%20the%20icons%2C%20which%20are%20%22packed%22%20and%20%22compressed&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Digg&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reddit.com/submit?url=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Reddit&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.google.com/bookmarks/mark?op=edit&amp;amp;bkmk=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;annotation=In%20this%20small%20blog%20post%20I%27ll%20show%20how%20Eclipse%20looks%20like%20in%20Linux%20Gnome%20%28Ubuntu%2017.10%29%20with%20a%20few%20Gnome%20themes.%0D%0A%0D%0AFirst%20of%20all%2C%20the%20default%20Ubuntu%20theme%2C%20Ambiance%2C%20makes%20Eclipse%20look%20not%20very%20nice...%20see%20the%20icons%2C%20which%20are%20%22packed%22%20and%20%22compressed&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Google Bookmarks&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://news.ycombinator.com/submitlink?u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;t=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;HackerNews&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://reporter.es.msn.com/?fn=contribute&amp;amp;Title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;URL=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;cat_id=6&amp;amp;tag_id=31&amp;amp;Remark=In%20this%20small%20blog%20post%20I%27ll%20show%20how%20Eclipse%20looks%20like%20in%20Linux%20Gnome%20%28Ubuntu%2017.10%29%20with%20a%20few%20Gnome%20themes.%0D%0A%0D%0AFirst%20of%20all%2C%20the%20default%20Ubuntu%20theme%2C%20Ambiance%2C%20makes%20Eclipse%20look%20not%20very%20nice...%20see%20the%20icons%2C%20which%20are%20%22packed%22%20and%20%22compressed&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;MSNReporter&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://sphinn.com/index.php?c=post&amp;amp;m=submit&amp;amp;link=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Sphinn&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://posterous.com/share?linkto=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;title=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;selection=In%20this%20small%20blog%20post%20I%27ll%20show%20how%20Eclipse%20looks%20like%20in%20Linux%20Gnome%20%28Ubuntu%2017.10%29%20with%20a%20few%20Gnome%20themes.%0D%0A%0D%0AFirst%20of%20all%2C%20the%20default%20Ubuntu%20theme%2C%20Ambiance%2C%20makes%20Eclipse%20look%20not%20very%20nice...%20see%20the%20icons%2C%20which%20are%20%22packed%22%20and%20%22compressed&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Posterous&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;li style=&quot;width: 16px;&quot;&gt;&lt;a class=&quot;option1_16&quot; href=&quot;http://www.tumblr.com/share?v=3&amp;amp;u=http%3A%2F%2Fwww.lorenzobettini.it%2F2018%2F02%2Feclipse-tested-with-a-few-gnome-themes%2F&amp;amp;t=Eclipse%20tested%20with%20a%20few%20Gnome%20themes&amp;amp;s=In%20this%20small%20blog%20post%20I%27ll%20show%20how%20Eclipse%20looks%20like%20in%20Linux%20Gnome%20%28Ubuntu%2017.10%29%20with%20a%20few%20Gnome%20themes.%0D%0A%0D%0AFirst%20of%20all%2C%20the%20default%20Ubuntu%20theme%2C%20Ambiance%2C%20makes%20Eclipse%20look%20not%20very%20nice...%20see%20the%20icons%2C%20which%20are%20%22packed%22%20and%20%22compressed&quot; rel=&quot;nofollow&quot; target=&quot;_blank&quot; title=&quot;Tumblr&quot;&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;			

			&lt;/div&gt;        

		  &lt;a class=&quot;close&quot; style=&quot;cursor: pointer;&quot;&gt;

		  &lt;img src=&quot;https://i0.wp.com/www.lorenzobettini.it/wp-content/plugins/sociable/images/closelabel.png?w=625&quot; title=&quot;close&quot; /&gt;

		  &lt;/a&gt;

		&lt;/div&gt;

	&lt;/div&gt; 

  &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;sociable&quot; style=&quot;float: none;&quot;&gt;&lt;ul class=&quot;clearfix&quot;&gt;&lt;li id=&quot;Twitter_Counter&quot;&gt;&lt;a class=&quot;twitter-share-button&quot; href=&quot;https://twitter.com/share&quot;&gt;Tweet&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;Facebook_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;Google_p&quot;&gt;&lt;/li&gt;&lt;li id=&quot;LinkedIn_Counter&quot;&gt;&lt;/li&gt;&lt;li id=&quot;StumbleUpon_Counter&quot;&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 13 Feb 2018 09:53:13 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Python 3 and Import Hooks for OSGi Services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-8198790809149751713</guid>
	<link>http://eclipseecf.blogspot.com/2018/02/python-3-and-import-hooks-for-osgi.html</link>
	<description>In a previous post I described using &lt;a href=&quot;http://eclipseecf.blogspot.com/2017/12/remote-services-between-python-and-java.html&quot; target=&quot;_blank&quot;&gt;Python for implementing OSGi Services&lt;/a&gt;.   This Python&amp;lt;-&amp;gt;Java service bridge allows Python-provided/implemented OSGi services called from Java, and Java-provided/implemented OSGi Services called from Python.   OSGi Remote Services provides a standardized way of communicating service meta-data (e.g. service contracts, endpoint meta-data) between Java and Python processes.&lt;br /&gt;&lt;br /&gt;As this Java&amp;lt;-&amp;gt;Python communication conforms to the OSGi Remote Services specification, everything is completely inter-operable with Declarative Services and/or other frameworks based upon OSGi Services.  It will also run in any OSGi R5+ environment, including Eclipse, Karaf, OSGi-based web servers, or other OSGi-based environments.&lt;br /&gt;&lt;br /&gt;Recently, Python 3 has introduced the concept of an &lt;b&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302/&quot; target=&quot;_blank&quot;&gt;Import Hook&lt;/a&gt;&lt;/b&gt;.   An import hook allows the python path and the behavior of the python import statement to be dynamically or extended. &lt;br /&gt;&lt;br /&gt;In the most recent version (2.7) of the &lt;a href=&quot;https://github.com/ECF/Py4j-RemoteServicesProvider&quot; target=&quot;_blank&quot;&gt;ECF Py4j Distribution Provider&lt;/a&gt;, we use import hooks so that Python module import is resolved by a Java-side OSGi ModuleResolver service.   For example, as described in &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_Python_for_OSGi_Services&quot; target=&quot;_blank&quot;&gt;this tutorial&lt;/a&gt;, this Python statement&lt;br /&gt;&lt;pre&gt;&lt;div&gt;&lt;br /&gt;from hello import HelloServiceImpl&lt;/div&gt;&lt;br /&gt;&lt;/pre&gt;imports the hello.py module as a string loaded from &lt;b&gt;within &lt;/b&gt;an OSGi bundle.  Among other things, this allows OSGi dynamics to be used to add and remove modules from the python path without stopping and restarting either the Java or the Python processes.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Tue, 13 Feb 2018 02:15:52 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.5.1 released!</title>
	<guid isPermaLink="true">http://vertx.io/blog/eclipse-vert-x-3-5-1-released</guid>
	<link>http://vertx.io/blog/eclipse-vert-x-3-5-1-released</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.1!&lt;/p&gt;
&lt;h4 id=&quot;fixes-first-&quot;&gt;Fixes first!&lt;/h4&gt;
&lt;p&gt;As usual this release fixes bugs reported in 3.5.0, see the release notes.&lt;/p&gt;
&lt;h4 id=&quot;junit-5-support&quot;&gt;JUnit 5 support&lt;/h4&gt;
&lt;p&gt;This release introduces the new &lt;a href=&quot;https://github.com/vert-x3/vertx-junit5&quot;&gt;vertx-junit5 module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://junit.org/junit5/&quot;&gt;JUnit 5&lt;/a&gt; is a rewrite of the famous Java testing framework that brings new interesting features, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nested tests,&lt;/li&gt;
&lt;li&gt;the ability to give a human-readable description of tests and test cases (and yes, even use emojis),&lt;/li&gt;
&lt;li&gt;a modular extension mechanism that is more powerful than the JUnit 4 runner mechanism (@RunWith annotation),&lt;/li&gt;
&lt;li&gt;conditional test execution,&lt;/li&gt;
&lt;li&gt;parameterized tests, including from sources such as CSV data,&lt;/li&gt;
&lt;li&gt;the support of Java 8 lambda expressions in the reworked built-in assertions API,&lt;/li&gt;
&lt;li&gt;support for running tests previously written for JUnit 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose that we have a &lt;code&gt;SampleVerticle&lt;/code&gt; verticle that exposes a HTTP server on port 11981.
Here is how we can test its deployment as well as the result of 10 concurrent HTTP requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-property&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;hljs-property&quot;&gt;@DisplayName&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;🚀 Deploy a HTTP service verticle and make 10 requests&quot;&lt;/span&gt;)
&lt;span class=&quot;hljs-literal&quot;&gt;void&lt;/span&gt; useSampleVerticle(Vertx vertx, VertxTestContext testContext) {
  WebClient webClient = WebClient.create(vertx);
  Checkpoint deploymentCheckpoint = testContext.checkpoint();

  Checkpoint requestCheckpoint = testContext.checkpoint(&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;);
  vertx.deployVerticle(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SampleVerticle(), testContext.succeeding(id&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; {
    deploymentCheckpoint.flag();

    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; (int i = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;; i++) {
      webClient.get(&lt;span class=&quot;hljs-number&quot;&gt;11981&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/&quot;&lt;/span&gt;)
        .as(BodyCodec.string())
        .send(testContext.succeeding(resp&lt;span class=&quot;hljs-function&quot;&gt; -&amp;gt;&lt;/span&gt; {
          testContext.verify&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-params&quot;&gt;(() -&amp;gt; {
            assertThat(resp.statusCode()).isEqualTo(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;);
            assertThat(resp.body()).contains(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Yo!&quot;&lt;/span&gt;);
            requestCheckpoint.flag();
          })&lt;/span&gt;;
        }));
    }
  }));
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The test method above benefits from the injection of a working &lt;code&gt;Vertx&lt;/code&gt; context, a &lt;code&gt;VertxTestContext&lt;/code&gt; for dealing with
asynchronous operations, and the guarantee that the execution time is bound by a timeout which can optionally be configured
using a &lt;code&gt;@Timeout&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;The test succeeds when all checkpoints have been flagged.
Note that &lt;code&gt;vertx-junit5&lt;/code&gt; is agnostic of the assertions library being used: you may opt for the built-in JUnit 5 assertions
or use a 3rd-party library such as &lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;AssertJ&lt;/a&gt; as we did in the example above.&lt;/p&gt;
&lt;p&gt;You can checkout the &lt;a href=&quot;https://github.com/vert-x3/vertx-junit5&quot;&gt;source on GitHub&lt;/a&gt;, read
&lt;a href=&quot;http://vertx.io/docs/vertx-junit5/java/&quot;&gt;the manual&lt;/a&gt; and learn from
&lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/junit5-examples&quot;&gt;the examples&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;web-api-contract-enhancements&quot;&gt;Web API Contract enhancements&lt;/h4&gt;
&lt;p&gt;The package &lt;code&gt;vertx-web-api-contract&lt;/code&gt; includes a variety of fixes, from schema &lt;code&gt;$ref&lt;/code&gt; to
&lt;a href=&quot;http://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;revamped documentation&lt;/a&gt;. You can give a look at list of all
&lt;a href=&quot;https://github.com/vert-x3/vertx-web/pull/802&quot;&gt;fixes/improvements here&lt;/a&gt; and all
&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.1-Breaking-Changes#vertx-web-api-contracts&quot;&gt;breaking changes here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From 3.5.1 to load the openapi spec and instantiate the Router you should use new method &lt;code&gt;OpenAPI3RouterFactory.create()&lt;/code&gt;
that replaces old methods &lt;code&gt;createRouterFactoryFromFile()&lt;/code&gt; and &lt;code&gt;createRouterFactoryFromURL()&lt;/code&gt;. This new method accepts
relative paths, absolute paths, local URL with &lt;code&gt;file://&lt;/code&gt; and remote URL with &lt;code&gt;http://&lt;/code&gt;. Note that if you want refeer to
a file relative to your jar’s root, you can simply use a relative path and the parser will look out the jar and into the
jar for the spec.&lt;/p&gt;
&lt;p&gt;From 3.5.1 all settings about &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; behaviours during router generation are inglobed in a new object called
&lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/ext/web/api/contract/RouterFactoryOptions.html&quot;&gt;&lt;code&gt;RouterFactoryOptions&lt;/code&gt;&lt;/a&gt;. From
this object you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configure if you want to mount a default validation failure handler and which one
(methods &lt;code&gt;setMountValidationFailureHandler(boolean)&lt;/code&gt; and &lt;code&gt;setValidationFailureHandler(Handler)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Configure if you want to mount a default 501 not implemented handler and which one
(methods &lt;code&gt;setMountNotImplementedFailureHandler(boolean)&lt;/code&gt; and &lt;code&gt;setNotImplementedFailureHandler(Handler)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Configure if you want to mount &lt;code&gt;ResponseContentTypeHandler&lt;/code&gt; automatically
(method &lt;code&gt;setMountResponseContentTypeHandler(boolean)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Configure if you want to fail during router generation when security handlers are not configured
(method &lt;code&gt;setRequireSecurityHandlers(boolean)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After initialization of route, you can mount the &lt;code&gt;RouterFactoryOptions&lt;/code&gt; object with method &lt;code&gt;routerFactory.setOptions()&lt;/code&gt;
when you want before calling &lt;code&gt;getRouter()&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;rxjava-deprecation-removal&quot;&gt;RxJava deprecation removal&lt;/h4&gt;
&lt;p&gt;It is important to know that 3.5.x will be the last release with the legacy &lt;code&gt;xyzObservable()&lt;/code&gt; methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@Deprecated&lt;/span&gt;()
&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Observable &lt;span class=&quot;hljs-title&quot;&gt;listenObservable&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;has been replaced since Vert.x 3.4 by:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; Single &lt;span class=&quot;hljs-title&quot;&gt;rxListen&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; port, String host)&lt;/span&gt;&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;xyzObservable()&lt;/code&gt; deprecated methods will be &lt;a href=&quot;https://github.com/vert-x3/vertx-rx/issues/113&quot;&gt;removed&lt;/a&gt; in Vert.x 3.6.&lt;/p&gt;
&lt;h4 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h4&gt;
&lt;p&gt;Vert.x 3.5.1 release notes and breaking changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.1-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.1-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.1-Breaking-Changes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.1-Breaking-Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.1%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.3.3/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: EclipseCon France 2018 Call for Papers</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/P-OCvrydq2E/france2018</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/P-OCvrydq2E/france2018</link>
	<description>Call for paper submissions are now open until March 19. We'll see you June 13 - 14 in Toulouse!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/P-OCvrydq2E&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 12 Feb 2018 14:15:00 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: The Eclipse Committer Election Workflow</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5437</guid>
	<link>https://waynebeaton.wordpress.com/2018/02/08/the-eclipse-committer-election-workflow/</link>
	<description>&lt;p&gt;In the world of open source, &lt;em&gt;Committers&lt;/em&gt; are ones who hold they keys. Committers decide what code goes into the code base, they decide how a project builds, and they ultimately decide what gets delivered to the adopter community. With awesome power, comes awesome responsibility, and so it’s no mistake that the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#2_1_Open_Source_Rules_of_Engagement&quot;&gt;Open Source Rules of Engagement&lt;/a&gt; described by the Eclipse Development Process, puts &lt;em&gt;Meritocracy&lt;/em&gt; on equal footing with &lt;em&gt;Transparency&lt;/em&gt; and &lt;em&gt;Openness&lt;/em&gt;: becoming a committer isn’t necessarily hard, but it does require a demonstration of commitment (committer… commitment… see what I did there?)&lt;/p&gt;
&lt;p&gt;There’s two ways to become an &lt;em&gt;Eclipse Committer&lt;/em&gt;. The first way is to be listed as an initial committer on a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#starting&quot;&gt;new project proposal&lt;/a&gt;. When projects come to the Eclipse Foundation we need them to actually start with committers, and so we include this as part of the bootstrapping. As part of the process of community vetting a new project proposal, the committers listed are themselves vetted by the community. That’s why we include space for a merit statement for every committer listed on a proposal (in many cases, the merit statement is an implied “these are the people who worked on the code that is being contributed”). In effect, the project proposal process also acts as a committer election that’s open to the entire community.&lt;/p&gt;
&lt;p&gt;The second way to become a committer is to get voted in via &lt;em&gt;Committer Election&lt;/em&gt;. This starts with a nomination by an existing committer that includes a statement of merit that usually takes the form of a list various contributions that the individual has made to the project. What constitutes a sufficient demonstration of merit varies by project team and PMC. Generally, though, after an individual has made a small number of high quality contributions that demonstrate that they understand how the project works, it’s pretty natural for them to be invited to join the team.&lt;/p&gt;
&lt;p&gt;There’s actually a third way. In cases where a project is dysfunctional, the project leadership has an option to add and remove committers and project leads. In the rare cases where this option is exercised, it is first discussed in the corresponding &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#4_6_1_PMC&quot;&gt;Project Management Committee&lt;/a&gt;‘s (PMC) mailing list.&lt;/p&gt;
&lt;p&gt;Last week, we rolled out some new infrastructure to support &lt;em&gt;Committer Elections&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Every project page in the Project Management Infrastructure (PMI) includes a block of &lt;em&gt;Committer Tools&lt;/em&gt; on the right side of the page. From this block, project committers can perform various actions, including the new &lt;em&gt;Nominate a Committer&lt;/em&gt; action.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_5436&quot;&gt;&lt;img alt=&quot;Screenshot from 2018-02-06 10-34-43&quot; class=&quot;  wp-image-5436 aligncenter&quot; height=&quot;377&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/02/screenshot-from-2018-02-06-10-34-43.png?w=181&amp;amp;h=377&quot; width=&quot;181&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Committer Tools&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Clicking this will bring up the nomination form where the existing committer will provide the name and email address of the nominee along with the statement of merit.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_5435&quot;&gt;&lt;img alt=&quot;Screenshot from 2018-02-06 10-35-15&quot; class=&quot;  wp-image-5435 aligncenter&quot; height=&quot;312&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/02/screenshot-from-2018-02-06-10-35-15.png?w=393&amp;amp;h=312&quot; width=&quot;393&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;What the committer sees when they nominate a new committer.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;When you click the &lt;em&gt;Nominate&lt;/em&gt; button, the &lt;em&gt;Committer Election&lt;/em&gt; begins by sending a note to the project mailing list inviting existing project committers to vote. Committers visit the election page to cast their vote and—since this is a transparent process—everybody else can watch the election unfold.&lt;/p&gt;
&lt;p&gt;According to our election rules, an election ends when either everybody votes in the affirmative or seven days has passed. If at the end of the election we have at least three affirmative votes and no negative votes, the vote is considered successful and it passed on to the PMC for approval (note that when a project has fewer than three committers, success is declared if everybody votes in the affirmative). The PMC will validate that the merit statement is sufficient and that the election was executed correctly, and either approve or veto it. PMC-approved elections get passed into the next piece of the workflow: &lt;em&gt;Committer Paperwork&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of how a developer becomes a committer (by vote, by proposal, or by appointment), they are required to complete legal paperwork before we can grant them write access to project resources. The Eclipse Foundation needs to ensure that all committers with write access to the code, websites, and issue tracking systems understand their role in the intellectual property process; and that we have accurate records of the people who are acting as change agents on the projects. Committers must provide documentation asserting that they have read, understood, and will follow the committer guidelines; and must gain their employers consent to their participation in Eclipse Foundation open source projects.&lt;/p&gt;
&lt;p&gt;Our &lt;em&gt;Commmitter Paperwork&lt;/em&gt; process is initiated whenever a developer joins us as a new committer, or—since paperwork is tied to a specific employer—when a committer changes employers.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screen Shot 2018-02-07 at 11.54.35 AM&quot; class=&quot;alignnone size-full wp-image-5438&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/02/screen-shot-2018-02-07-at-11-54-35-am-e1518029639940.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The exact nature of the type of paperwork required varies based on the individual’s employment status and the &lt;a href=&quot;https://www.eclipse.org/membership/&quot;&gt;Eclipse Foundation membership&lt;/a&gt; status of their employer. Again, a full discussion of this is out-of-scope for this post, but we need to have either an &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#paperwork-ica&quot;&gt;Individual Committer Agreement&lt;/a&gt; or a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#paperwork-mca&quot;&gt;Member Committer Agreement&lt;/a&gt; on file for every committer. The workflow guides the new committer through the options.&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;Note that we’ve just gotten approval on an update to the Individual Committer Agreement that eliminates the need for the companion Eclipse Foundation Committer Employer Consent Form. This should make it easier for new committers to get started. We’re &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=530861&quot;&gt;rolling the new version out now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We owe this great new implementation of this workflow to the tireless efforts of the entire Eclipse IT Team, and especially &lt;a href=&quot;https://www.eclipse.org/user/epoirier&quot;&gt;Eric&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/user/cguindon&quot;&gt;Chris&lt;/a&gt;, and &lt;a href=&quot;https://accounts.eclipse.org/users/mward&quot;&gt;Matt&lt;/a&gt;. Big Thanks!&lt;/p&gt;</description>
	<pubDate>Thu, 08 Feb 2018 15:30:26 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: Starting an open source program office?</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4194</guid>
	<link>http://aniszczyk.org/2018/02/08/starting-an-open-source-program-office/</link>
	<description>&lt;p&gt;To make good on my new years resolutions of writing more, I recently wrote an &lt;a href=&quot;https://opensource.com/article/18/1/how-start-open-source-program-your-company&quot;&gt;article for opensource.com&lt;/a&gt; on starting an open source program for your company:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;How to start an &lt;a href=&quot;https://twitter.com/hashtag/opensource?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#opensource&lt;/a&gt; program in your company: &lt;a href=&quot;https://t.co/OZi3pyxEA5&quot;&gt;https://t.co/OZi3pyxEA5&lt;/a&gt; &lt;a href=&quot;https://t.co/5OYiQG8Vf8&quot;&gt;pic.twitter.com/5OYiQG8Vf8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Open Source Way (@opensourceway) &lt;a href=&quot;https://twitter.com/opensourceway/status/960898646748393472?ref_src=twsrc%5Etfw&quot;&gt;February 6, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Please check it out and let me know if you have any comments. I’d really like to see us build a future where more companies have formal open source programs, that’s a key path towards making open source sustainable for everyone.&lt;/p&gt;</description>
	<pubDate>Thu, 08 Feb 2018 14:17:12 +0000</pubDate>
</item>
<item>
	<title>itemis: Becoming Xtext Co-Project Lead</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/becoming-xtext-co-project-lead</guid>
	<link>https://blogs.itemis.com/en/becoming-xtext-co-project-lead</link>
	<description>&lt;p&gt;I started using Xtext more than 10 years ago. Back then it was a small part of the openArchitectureware framework. I began using it heavily after the move to Eclipse and got a power user and supporter in the newsgroups and forum. In 2016 I joined the Xtext Committer team and worked on the framework for about 50% of my time.&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;Roughly at the same time &lt;a href=&quot;https://hosting.itemis.de/de/itemis-typefox-xtext&quot;&gt;parts of the Xtext team moved away from itemis&lt;/a&gt;. So the people working on Xtext and their main focus changed. I still think Xtext is a very valuable framework and it deserves more attention than it currently gets. This is why I stepped up to become a co-project lead for the project to ensure it's management is put on wider legs.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;img alt=&quot;whats-new&quot; height=&quot;462&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/whats-new.jpg?t=1517941087956&amp;amp;width=970&amp;amp;height=462&amp;amp;name=whats-new.jpg&quot; style=&quot;width: 970px;&quot; width=&quot;970&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;As Xtext committer and co-project lead my main goals are the following&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ensure that Xtext and Xtend are actively maintained and will work with future versions of the Eclipse Platform and JDT as well as with future versions of Java itself (for example the Java 9 support we are currently working on).&lt;/li&gt; 
 &lt;li&gt;Relevant bugs and performance problems keep being addressed and fixed in a reasonable manner and timespan.&lt;/li&gt; 
 &lt;li&gt;Enable more users to contribute to Xtext.&lt;/li&gt; 
 &lt;li&gt;Develop new features that make life of our users more easy and keep track with trends and developments inside and outside the Eclipse ecosystem.&lt;/li&gt; 
 &lt;li&gt;Make sure Xtext in future still will be supported and running smooth in standalone modes such as LSP as well as inside Eclipse IDE.&lt;/li&gt; 
 &lt;li&gt;Make sure we have regular releases and keep track with the release process that is currently planned for Eclipse platform but we may slow down from the release cadence you are used from the past.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;It is not only the TypeFox guys or &lt;a href=&quot;https://www.itemis.com/en/xtext/&quot;&gt;our Xtext-Team at itemis&lt;/a&gt; (Karsten, Sebastian, Holger and other colleagues) that drive Xtext. I invite you as Xtext community to actively contribute to the framework: Not only by filing bugs or giving feedback but i warmly welcome everybody who is willing to contribute fixes or features to Xtext. Get in contact with us and let us work together on a great future for Xtext.&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fbecoming-xtext-co-project-lead&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 07 Feb 2018 09:07:40 +0000</pubDate>
	<author>dietrich@itemis.de (Christian Dietrich)</author>
</item>
<item>
	<title>Eclipse Announcements: EE.next working group - community review process</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/s5OSPunAH5k/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/s5OSPunAH5k/</link>
	<description>Announcing the EE.next working group to support the EE4J projects. Join the review process of the charter.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/s5OSPunAH5k&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 06 Feb 2018 13:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Introducing the EE.next Working Group</title>
	<guid isPermaLink="false">http://mmilinkov.wordpress.com/?p=1429</guid>
	<link>https://mmilinkov.wordpress.com/2018/02/05/introducing-the-ee-next-working-group/</link>
	<description>&lt;p&gt;As part of our continuing adventures in &lt;a href=&quot;https://mmilinkov.wordpress.com/2018/01/23/ee4j-current-status-and-whats-next/&quot;&gt;migrating Java EE to the Eclipse Foundation&lt;/a&gt; I am pleased to announce that the draft of the &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/eclipse_ee_next_charter.php&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EE.next Working Group charter&lt;/a&gt;  has now been posted for community review. Comments and feedback are welcomed on the &lt;a href=&quot;mailto:ee4j-community@eclipse.org&quot;&gt;ee4j-community@eclipse.org&lt;/a&gt; mail list. But please please pretty please make sure you read the &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/eclipse_ee_next_faq.php&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;FAQ&lt;/a&gt; (also copied below) before you do.&lt;/p&gt;
&lt;p&gt;You can think of this EE.next group as the replacement for the Java Community Process for Java EE. It will be the body that the ecosystem can join and participate in at a corporate level. Individuals can also join if they are committers on EE4J projects. EE.next will also be the place where the new specification process will be created and managed, and where specs will be reviewed and approved.&lt;/p&gt;
&lt;p&gt;Under the &lt;a href=&quot;https://www.eclipse.org/org/workinggroups/industry_wg_process.php&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;process&lt;/a&gt; for establishing Eclipse Foundation working groups, there will now be a community review period lasting a minimum of 30 days.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;h2 class=&quot;h3&quot;&gt;What is the purpose of a working group?&lt;/h2&gt;
&lt;p&gt;An Eclipse Foundation working group is a special-purpose consortia of Eclipse Members interested in supporting a technology domain. They are intended to complement the activities of a collection of Eclipse Foundation open source projects. Open source projects are excellent for many things, but they typically do not do a great job with activities such as marketing, branding, specification and compliance processes, and the like.&lt;/p&gt;
&lt;h2 class=&quot;h3&quot;&gt;What is the role of the PMC versus the working group or the working group Steering Committee?&lt;/h2&gt;
&lt;p&gt;Eclipse Foundation projects are self-governing meritocracies that set their own technical agendas and plans. The Project Management Committee for an Eclipse top-level project oversees the day-to-day activities of its projects through activities such as reviewing and approving plans, accepting new projects, approving releases, managing committer elections, and the like.&lt;/p&gt;
&lt;p&gt;Working groups and their steering committees are intended to complement the work happening in the open source projects with activities that lead to greater adoption, market presence, and momentum. Specifically the role of the working group is to foster the creation and growth of the ecosystem that surrounds the projects.&lt;/p&gt;
&lt;p&gt;Working groups do not direct the activities of the projects or their PMC. They are intended to be peer organizations that work in close collaboration with one another.&lt;/p&gt;
&lt;h2 class=&quot;h3&quot;&gt;Who defines and manages technical direction?&lt;/h2&gt;
&lt;p&gt;The projects manage their technical direction. The PMC may elect to coordinate the activities of multiple projects to facilitate the release of software platforms, for example.&lt;/p&gt;
&lt;p&gt;Because the creation of roadmaps and long term release plans can require market analysis, requirements gathering, and resource commitments from member companies, the working group may sponsor complementary activities to generate these plans. However, ultimately it is up to the projects to agree to implement these plans or roadmaps. The best way for a working group to influence the direction of the open source projects is to ensure that they have adequate resources. This can take the form of developer contributions, or under the &lt;a href=&quot;https://staging.eclipse.org/org/workinggroups/mfi_program.php&quot;&gt;Member Funded Initiatives programs&lt;/a&gt;, working groups can pool funds to contract developers to implement the features they desire.&lt;/p&gt;
&lt;h2 class=&quot;h3&quot;&gt;Why are there so many levels of membership?&lt;/h2&gt;
&lt;p&gt;Because the Java EE ecosystem is a big place, and we want to ensure that there are roles for all of the players in it. We see the roles of the various member classes to roughly align as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strategic members are the vendors that deliver Java EE implementations. As such they are typically putting in the largest number of contributors, and are leading many of the projects.&lt;/li&gt;
&lt;li&gt;Influencer members are the large enterprises that rely upon Java EE today for their mission critical application infrastructure, and who are looking to EE.next to deliver the next generation of cloud native Java. They have made strategic investments in this technology, have a massive skills investment in their developers, and want to protect these investments as well as influence the future of this technology.&lt;/li&gt;
&lt;li&gt;Participant members are the companies that offer complementary products and services within the Java EE ecosystem. Examples include ISVs which build products on Java EE, or system integrators that use these technologies in delivering solutions to their customers.&lt;/li&gt;
&lt;li&gt;Committer members are comprised of the committers working on the various EE4J projects who are also members of the Eclipse Foundation. While the &lt;a href=&quot;https://staging.eclipse.org/org/documents/&quot;&gt;Eclipse bylaws&lt;/a&gt; define the criteria for committers to be considered members, in essence any committer members are either a) a committer who is an employee of an EE.next member company or b) any other committer who has explicitly chosen to join as a member. Giving Committer members a role in the working group governance process mimics the governance structure of the Eclipse Foundation itself, where giving committers an explicit voice has been invaluable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class=&quot;h3&quot;&gt;What makes this different from the Java Community Process (JCP)?&lt;/h2&gt;
&lt;p&gt;The EE.next working group will be the successor organization to the JCP for the family of technologies formerly known as Java EE. It has several features that make it a worthy successor to the JCP:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is vendor neutral. The JCP was owned and operated first by Sun and later by Oracle. EE.next is designed to be inclusive and diverse, with no organization having any special roles or rights.&lt;/li&gt;
&lt;li&gt;It has open intellectual property flows. At the JCP, all IP flowed to the Spec Lead, which was typically Oracle. We are still working out the exact details, but the IP rights with EE.next and EE4J will certainly not be controlled by any for-profit entity.&lt;/li&gt;
&lt;li&gt;It is more agile. This is an opportunity to define a 21st century workflow for creating rapidly evolving Java-based technologies. We will be merging the best practices from open source with what we have learned from over 15 years of JCP experience.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 class=&quot;h3&quot;&gt;Is the WG steering committee roughly equivalent to the JCP Executive Committee?&lt;/h2&gt;
&lt;p&gt;No, not really. The JCP EC always had two mixed roles: as a technical body overseeing the specification process, and as an ecosystem governance body promoting Java ME, SE, and EE. In EE.next the Steering Committee will be the overall ecosystem governance body. The EE.next Specification Committee will focus solely on the development and smooth operation of the technical specification process.&lt;/p&gt;
&lt;h2 class=&quot;h3&quot;&gt;Does a project have to be approved as a spec before it can start?&lt;/h2&gt;
&lt;p&gt;That is actually a decision which will be made by the EE4J PMC, not the working group. However, it is a goal of the people and organizations working on creating this working group that the Java EE community move to more of a code-first culture. We anticipate and hope that the EE4J PMC will embrace the incubation of technologies under its banner. Once a technology has been successfully implemented and adopted by at least some in the industry, it can then propose that a specification be created for it.&lt;/p&gt;
&lt;h2 class=&quot;h3&quot;&gt;In addition to the Steering Committee, what other committees exist?&lt;/h2&gt;
&lt;p&gt;There are four committees comprising the EE.next governance structure – the Steering Committee, the Specification Committee, the Marketing and Brand Committee, and the Enterprise Requirements Committee. A summary of the make-up of each of the committees is in the table below.&lt;/p&gt;
&lt;table class=&quot;table&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Strategic Member&lt;/th&gt;
&lt;th&gt;Influencer Member&lt;/th&gt;
&lt;th&gt;Participant Member&lt;/th&gt;
&lt;th&gt;Committer Member&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Member of the Steering Committee&lt;/td&gt;
&lt;td&gt;Appointed&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Member of the Specification Committee&lt;/td&gt;
&lt;td&gt;Appointed&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Member of the Marketing Committee&lt;/td&gt;
&lt;td&gt;Appointed&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;td&gt;Elected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Member of the Enterprise Requirements Committee&lt;/td&gt;
&lt;td&gt;Appointed&lt;/td&gt;
&lt;td&gt;Appointed&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
	<pubDate>Mon, 05 Feb 2018 19:43:02 +0000</pubDate>
</item>
<item>
	<title>itemis: In 5 Minuten zur DSL mit transitiven Importen in Xtext</title>
	<guid isPermaLink="true">https://blogs.itemis.com/de/in-5-minuten-zur-dsl-mit-transitiven-importen-in-xtext</guid>
	<link>https://blogs.itemis.com/de/in-5-minuten-zur-dsl-mit-transitiven-importen-in-xtext</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext ermöglicht das Referenzieren von Elementen in DSLs auf mehrere Arten. Eine Möglichkeit sieht den Import von Elementen über Namensräume vor. Dies geschieht über die Verwendung des &lt;/span&gt;&lt;code&gt;ImportedNamespaceAwareLocalScopeProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; und erlaubt den &quot;Import&quot; einzelner oder, unter Einsatz von Wildcards (&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.*&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;), aller Elemente eines Namensraumes.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Es kann aber Sprachen geben, in denen dieses Verhalten nicht gewünscht ist. In diesen Sprachen importiert der Nutzer explizit eine oder mehrere Ressource-Dateien, um auf deren Inhalte zugreifen zu können.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eine einfache DSL mit Import-Verhalten dank Xtext&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eine DSL mit einem solchen Import-Verhalten lässt sich mit https://www.itemis.com/en/xtext/ recht einfach erstellen, indem man eine Parser-Regel mit dem speziellen Attributnamen &lt;a href=&quot;https://www.itemis.com/en/xtext/&quot;&gt;Xtext&lt;/a&gt;&lt;/span&gt;&lt;code&gt;importURI&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in die DSL einbaut. Das folgende Beispiel stellt eine einfache DSL dar, die es erlaubt, in beliebigen Ressourcen Namen zu definieren und diese in Grußbotschaften zu verwenden.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals
generate myDsl &quot;http://www.xtext.org/example/mydsl/MyDsl&quot;
Model:
	includes+=Include*
	names+=Name*
	greetings+=Greeting*;
Include:
	'import' importURI=STRING
	;
Name:
	'def' name=ID
	;
Greeting:
	'Hallo' name=[Name] '!'
	;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Wir möchten Kollegen aus unserer Firma Grußbotschaften schicken. Da die Firma aber groß ist und aus vielen Kollegen besteht, die in unterschiedlichen Bereichen arbeiten, möchten wir für jeden Firmenbereich eine eigene Datei erstellen, die die Namen der jeweiligen Kollegen enthält. Dies erhöht die Übersicht und Wartbarkeit.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Nur durch einen expliziten Import einer Ressource wollen wir die enthaltenen Namensdefinitionen in den Scope aufnehmen. Dabei soll dies möglichst schnell und ressourcenschonend erfolgen.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Der Ansatz ist hierbei, die Verwendung des Index, die das unnötige und (bei großen Modellen) zeitaufwendige Laden von Ressourcen überflüssig macht. Als ersten Schritt müssen wir die Informationen bzgl. der importierten Ressourcen in den Index schreiben. Dazu implementieren wir eine Klasse &lt;/span&gt;&lt;code&gt;MyDslResourceDescriptionStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, die von &lt;/span&gt;&lt;code&gt;DefaultResourceDescriptionStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; ableitet. Die Strings mit den URIs, der in der Parser-Regel &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Model&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; importierten Ressourcen, werden in einen durch Kommas getrennten String zusammengeführt und unter dem Schlüssel &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;includes&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; in der &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;userData&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Map der Objektbeschreibung im Index gespeichert.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package org.xtext.example.mydsl

import com.google.inject.Inject
import java.util.HashMap
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.resource.impl.DefaultResourceDescriptionStrategy
import org.eclipse.xtext.scoping.impl.ImportUriResolver
import org.eclipse.xtext.util.IAcceptor
import org.xtext.example.mydsl.myDsl.Model
import org.eclipse.emf.ecore.EObject

class MyDslResourceDescriptionStrategy extends DefaultResourceDescriptionStrategy {
	public static final String INCLUDES = &quot;includes&quot;
	@Inject
	ImportUriResolver uriResolver

	override createEObjectDescriptions(EObject eObject, IAcceptor acceptor) {
		if(eObject instanceof Model) {
			this.createEObjectDescriptionForModel(eObject, acceptor)
			return true
		}
		else {
			super.createEObjectDescriptions(eObject, acceptor)
		}
	}

	def void createEObjectDescriptionForModel(Model model, IAcceptor acceptor) {
		val uris = newArrayList()
		model.includes.forEach[uris.add(uriResolver.apply(it))]
		val userData = new HashMap&amp;lt;string,string&amp;gt;
		userData.put(INCLUDES, uris.join(&quot;,&quot;))
		acceptor.accept(EObjectDescription.create(QualifiedName.create(model.eResource.URI.toString), model, userData))
	}
}&lt;/pre&gt; 
&lt;br /&gt; Um unsere ResourceDescriptionStrategy nutzen zu können, müssen wir sie noch im MyDslRuntimeModule binden. 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package org.xtext.example.mydsl&lt;br /&gt;&lt;br /&gt;import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy&lt;br /&gt;import org.eclipse.xtext.scoping.IGlobalScopeProvider&lt;br /&gt;import org.xtext.example.mydsl.scoping.MyDslGlobalScopeProvider&lt;br /&gt;&lt;br /&gt;class MyDslRuntimeModule extends AbstractMyDslRuntimeModule {&lt;br /&gt; def Class&amp;lt;? extends IDefaultResourceDescriptionStrategy&amp;gt; bindIDefaultResourceDescriptionStrategy() {&lt;br /&gt; MyDslResourceDescriptionStrategy&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Bisher haben wir nur Informationen gesammelt und im Index gespeichert. Um sie verwenden zu können, benötigen wir zusätzlich einen eigenen &lt;/span&gt;&lt;code&gt;IGlobalScopeProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Dazu implementieren wir eine Klasse &lt;/span&gt;&lt;code&gt;MyDslGlobalScopeProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, die von &lt;/span&gt;&lt;code&gt;ImportUriGlobalScopeProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; ableitet, und überschreiben die Methode &lt;/span&gt;&lt;code&gt;getImportedUris(Resource resource)&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Diese Methode liefert ein &lt;/span&gt;&lt;code&gt;LinkedHashSet&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; zurück, das letztendlich alle URIs enthält, die in der Ressource importiert werden sollen.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Das Auslesen der importierten Ressourcen aus dem Index wird von der Methode &lt;/span&gt;&lt;code&gt;collectImportUris&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; erledigt. Die Methode fragt den &lt;/span&gt;&lt;code&gt;IResourceDescription.Manager&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; nach der &lt;/span&gt;&lt;code&gt;IResourceDescription&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; der Ressource. Aus dieser wird für jedes &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Model&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;-Element aus der &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;userData&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Map der unter dem Schlüssel &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;includes&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; gespeicherte String mit den URIs der importierten Ressourcen ausgelesen, zerlegt und die einzelnen URIs in einem Set gespeichert.&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package org.xtext.example.mydsl.scoping

import com.google.common.base.Splitter
import com.google.inject.Inject
import com.google.inject.Provider
import java.util.LinkedHashSet
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.IResourceDescription
import org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider
import org.eclipse.xtext.util.IResourceScopeCache
import org.xtext.example.mydsl.MyDslResourceDescriptionStrategy
import org.xtext.example.mydsl.myDsl.MyDslPackage

class MyDslGlobalScopeProvider extends ImportUriGlobalScopeProvider {
	private static final Splitter SPLITTER = Splitter.on(',');

	@Inject
	IResourceDescription.Manager descriptionManager;

	@Inject
	IResourceScopeCache cache;

	override protected getImportedUris(Resource resource) {
		return cache.get(MyDslGlobalScopeProvider.getSimpleName(), resource, new Provider&amp;lt;linkedhashset&amp;gt;() {
			override get() {
				val uniqueImportURIs = collectImportUris(resource, new LinkedHashSet(5))

				val uriIter = uniqueImportURIs.iterator()
				while(uriIter.hasNext()) {
					if (!EcoreUtil2.isValidUri(resource, uriIter.next()))
						uriIter.remove()
				}
				return uniqueImportURIs
			}

			def LinkedHashSet collectImportUris(Resource resource, LinkedHashSet uniqueImportURIs) {
				val resourceDescription = descriptionManager.getResourceDescription(resource)
				val models = resourceDescription.getExportedObjectsByType(MyDslPackage.Literals.MODEL)
				
				models.forEach[
					val userData = getUserData(MyDslResourceDescriptionStrategy.INCLUDES)
					if(userData !== null) {
						SPLITTER.split(userData).forEach[uri |
							var includedUri = URI.createURI(uri)
							includedUri = includedUri.resolve(resource.URI)
							uniqueImportURIs.add(includedUri)
						]
					}
				]
				return uniqueImportURIs
			}
		});
	}
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Um unseren &lt;/span&gt;&lt;code&gt;MyDslGlobalScopeProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; nutzen zu können, müssen wir diesen wiederum im &lt;/span&gt;&lt;code&gt;MyDslRuntimeModule&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; binden.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package org.xtext.example.mydsl

import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.xtext.example.mydsl.scoping.MyDslGlobalScopeProvider

class MyDslRuntimeModule extends AbstractMyDslRuntimeModule {
	def Class bindIDefaultResourceDescriptionStrategy() {
		MyDslResourceDescriptionStrategy
	}
	override Class bindIGlobalScopeProvider() {
		MyDslGlobalScopeProvider;
	}
}&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Wir starten den Editor für unsere kleine Sprache und beginnen die Modell-Dateien zu erstellen. Dabei haben wir die Idee, die Ressourcen der unterschiedlichen Firmenbereiche nicht einzeln zu importieren, sondern eine Ressource zu erstellen, die alle Importe enthält, und diese dann zu importieren. Dazu erstellen wir folgende Ressourcen:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Ressourcen-Agile.png&quot; height=&quot;85&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Software%20Development/Ressourcen-Agile.png?t=1517941087956&amp;amp;width=724&amp;amp;height=85&amp;amp;name=Ressourcen-Agile.png&quot; width=&quot;724&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt; &lt;img alt=&quot;Ressourcen-Xtext.png&quot; height=&quot;84&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Software%20Development/Ressourcen-Xtext.png?t=1517941087956&amp;amp;width=724&amp;amp;height=84&amp;amp;name=Ressourcen-Xtext.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Ressource-Kollegen.png&quot; height=&quot;87&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Software%20Development/Ressource-Kollegen.png?t=1517941087956&amp;amp;width=724&amp;amp;height=87&amp;amp;name=Ressource-Kollegen.png&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Beim Erstellen der Ressource mit den Grußbotschaften stellen wir fest, dass die Namen nicht aufgelößt werden können.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Ressource-Greetings.png&quot; height=&quot;200&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Software%20Development/Ressource-Greetings.png?t=1517941087956&amp;amp;width=724&amp;amp;height=200&amp;amp;name=Ressource-Greetings.png&quot; width=&quot;724&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Woran liegt das? Wir haben doch alle importierten Ressourcen in den Index geschrieben.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Das ist soweit richtig. Alle direkt importieren Ressourcen werden in den Index geschrieben. Die Importe in einer importierten Ressource jedoch werden ignoriert. Das von uns gewünschte Feature bezeichnet man als transitive Importe. Mit dem Import einer Ressource werden implizit alle von ihr importierten Ressourcen mit importiert.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Um in unserer Sprache transitive Importe zu ermöglichen, müssen wir unseren &lt;/span&gt;&lt;code&gt;MyDslGlobalScopeProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; anpassen. Statt die URI einer importierten Ressource nur in dem Set zu speichern, rufen wir zusätzlich die Methode &lt;/span&gt;&lt;code&gt;collectImportUris&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; auf und übergeben die URI als Parameter, sodass deren importierte Ressourcen ebenfalls verarbeitet werden.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package org.xtext.example.mydsl.scoping

import com.google.common.base.Splitter
import com.google.inject.Inject
import com.google.inject.Provider
import java.util.LinkedHashSet
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.IResourceDescription
import org.eclipse.xtext.scoping.impl.ImportUriGlobalScopeProvider
import org.eclipse.xtext.util.IResourceScopeCache
import org.xtext.example.mydsl.MyDslResourceDescriptionStrategy
import org.xtext.example.mydsl.myDsl.MyDslPackage

class MyDslGlobalScopeProvider extends ImportUriGlobalScopeProvider {
	private static final Splitter SPLITTER = Splitter.on(',');

	@Inject
	IResourceDescription.Manager descriptionManager;

	@Inject
	IResourceScopeCache cache;

	override protected getImportedUris(Resource resource) {
		return cache.get(MyDslGlobalScopeProvider.getSimpleName(), resource, new Provider&amp;lt;linkedhashset&amp;gt;() {
			override get() {
				val uniqueImportURIs = collectImportUris(resource, new LinkedHashSet(5))

				val uriIter = uniqueImportURIs.iterator()
				while(uriIter.hasNext()) {
					if (!EcoreUtil2.isValidUri(resource, uriIter.next()))
						uriIter.remove()
				}
				return uniqueImportURIs
			}

			def LinkedHashSet collectImportUris(Resource resource, LinkedHashSet uniqueImportURIs) {
				val resourceDescription = descriptionManager.getResourceDescription(resource)
				val models = resourceDescription.getExportedObjectsByType(MyDslPackage.Literals.MODEL)
				
				models.forEach[
					val userData = getUserData(MyDslResourceDescriptionStrategy.INCLUDES)
					if(userData !== null) {
						SPLITTER.split(userData).forEach[uri |
							var includedUri = URI.createURI(uri)
							includedUri = includedUri.resolve(resource.URI)
							if(uniqueImportURIs.add(includedUri)) {
								collectImportUris(resource.getResourceSet().getResource(includedUri, true), uniqueImportURIs)
							}
						]
					}
				]
				
				return uniqueImportURIs
			}
		});
	}
}&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Wenn wir nach dieser kleinen Anpassung unsere Ressource mit den Grußbotschaften erneut öffnen sehen wir, dass die Namen durch die transitiven Importe aufgelöst werden können.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Das Beispielprojekt kann &lt;/span&gt;&lt;a href=&quot;https://github.com/itemis/itemis-blog/tree/transitive_imports/sources&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;hier&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; heruntergeladen werden.&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fde%2Fin-5-minuten-zur-dsl-mit-transitiven-importen-in-xtext&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 05 Feb 2018 14:51:00 +0000</pubDate>
	<author>cwehrheim@itemis.de (Christian Wehrheim)</author>
</item>
<item>
	<title>Jeremie Bresson: Use the eclipse-settings-maven-plugin to synchronize prefs files across projects</title>
	<guid isPermaLink="true">http://jmini.github.io/blog/2018/2018-02-05_eclipse-settings-maven-plugin.html</guid>
	<link>http://jmini.github.io/blog/2018/2018-02-05_eclipse-settings-maven-plugin.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;The question « &lt;em&gt;Should the meta files related to an IDE be committed in the git repository?&lt;/em&gt; » is a never-ending fight. According to &lt;a href=&quot;https://twitter.com/apupier&quot;&gt;Aurelien Pupier&lt;/a&gt;, the answer to this question is YES (&lt;a href=&quot;https://www.eclipsecon.org/europe2015/comment/628.html&quot;&gt;Talk&lt;/a&gt; from 2015 - &lt;a href=&quot;https://www.slideshare.net/AurelienPupier/committing-ide-meta-files-misconceptions-misunderstandings-and-solutions&quot;&gt;slides&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=J5RzSbpNLM4&quot;&gt;video&lt;/a&gt;). I totally agree with him, because settings files like &lt;code&gt;org.eclipse.core.resources.prefs&lt;/code&gt;, &lt;code&gt;org.eclipse.jdt.core.prefs&lt;/code&gt;, &lt;code&gt;org.eclipse.jdt.ui.prefs&lt;/code&gt; or &lt;code&gt;org.eclipse.m2e.core.prefs&lt;/code&gt; can contain valuable configuration information that will be shared between all Eclipse IDE users working on the project: code formatting rules, save actions, automated code cleanup tasks, compiler settings…&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Enable project specific settings&quot; src=&quot;http://jmini.github.io/blog/2018/2018-02-05_enable_project_specific_settings.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Even today a lot of people still prefer not to have the IDE metadata files in their git Repository. This means that every coworker needs to configure his IDE and more important everybody needs to keep the configuration in sync with the team over the time.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;In both cases (having the settings files in your repo or not), the &lt;a href=&quot;https://github.com/BSI-Business-Systems-Integration-AG/eclipse-settings-maven-plugin&quot;&gt;eclipse-settings-maven-plugin&lt;/a&gt; can be interesting for you. The idea is to use maven in order to replicate the same prefs files across multiple maven modules. This way you can distribute the prefs file if they are missing in the git repository. An other use case is the distribution accros multiple teams (for example at organization level).&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;The source for the settings file is a simple maven artifact located in a maven repository. With a single maven command, you can synchronize the prefs files.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;Using eclipse-settings-maven-plugin to copy prefs files&quot; src=&quot;http://jmini.github.io/blog/2018/2018-02-05_sync_eclipse-settings.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If you wants to see how the setup looks like, you can refer to my &lt;a href=&quot;https://jmini.github.io/sync-eclipse-settings-example/&quot;&gt;sync-eclipse-settings-example&lt;/a&gt; page and the associated GitHub project. I have updated it in order to use the latest version published last week by my former colleagues at BSI Business Systems Integration AG.&lt;/p&gt; 
&lt;/div&gt;</description>
	<pubDate>Sun, 04 Feb 2018 23:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Last Week to Submit for FOSS4G NA 2018!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/djLr8W3gbZQ/cfp</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/djLr8W3gbZQ/cfp</link>
	<description>Submissions close Feb 8, so propose your talk now for FOSS4G NA 2018, May 14-16 in St. Louis&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/djLr8W3gbZQ&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 02 Feb 2018 13:30:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: The Sum of all Reductions</title>
	<guid isPermaLink="false">https://medium.com/p/d46dfd334704</guid>
	<link>https://medium.com/@donraab/the-sum-of-all-reductions-d46dfd334704?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;The reduction of all sums&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*4V0JpvDWE8rlqhN2A21u5w.png&quot; /&gt;Belmar, NJ during the Deep Freeze of 2018&lt;/figure&gt;&lt;p&gt;During the Deep Freeze of 2018, everything in the world seemed to be reduced to ice and snow, including the sky. Even the sun seemed to be reduced as it ran away from my camera with a shiver.&lt;/p&gt;&lt;p&gt;This got me thinking about different kinds of reductions we have available in Java with &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; and Java Streams. I wondered how many ways we could define &lt;em&gt;sum&lt;/em&gt; with the various methods available.&lt;/p&gt;&lt;h4&gt;Summing an array of ints&lt;/h4&gt;&lt;p&gt;Let’s consider several ways we can sum the values in an int array in Java.&lt;/p&gt;&lt;p&gt;Here is the data we will use.&lt;/p&gt;&lt;pre&gt;int[] ints = {1, 2, 3, 4, 5};&lt;/pre&gt;&lt;pre&gt;// This supplier will generate an IntStream on demand&lt;br /&gt;Supplier&amp;lt;IntStream&amp;gt; intStream = () -&amp;gt; Arrays.&lt;em&gt;stream&lt;/em&gt;(&lt;em&gt;ints&lt;/em&gt;);&lt;/pre&gt;&lt;pre&gt;// This creates an IntList from Eclipse Collections&lt;br /&gt;IntList intList = IntLists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(ints);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;For Loop&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;int &lt;strong&gt;sumForLoop &lt;/strong&gt;= 0;&lt;br /&gt;for (int &lt;strong&gt;i &lt;/strong&gt;= 0; &lt;strong&gt;i &lt;/strong&gt;&amp;lt; ints.length; &lt;strong&gt;i&lt;/strong&gt;++)&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;sumForLoop &lt;/strong&gt;+= ints[&lt;strong&gt;i&lt;/strong&gt;];&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, &lt;strong&gt;sumForLoop&lt;/strong&gt;);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;forEach&lt;/strong&gt; (IntStream) / &lt;strong&gt;each&lt;/strong&gt; (IntList)&lt;/p&gt;&lt;pre&gt;// sumForEach will be effectively final&lt;br /&gt;int[] sumForEach = {0};&lt;br /&gt;intStream.get().forEach(e -&amp;gt; &lt;em&gt;sumForEach&lt;/em&gt;[0] += e);&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, sumForEach[0]);&lt;/pre&gt;&lt;pre&gt;// sumEach will be effectively final&lt;br /&gt;int[] sumEach = {0};&lt;br /&gt;intList.each(e -&amp;gt; &lt;em&gt;sumEach&lt;/em&gt;[0] += e);&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, sumEach[0]);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;injectInto&lt;/strong&gt; (IntList)&lt;/p&gt;&lt;pre&gt;// injectInto boxes on IntList as there is no primitive version&lt;br /&gt;int sumInject = &lt;br /&gt;    intList.injectInto(Integer.&lt;em&gt;valueOf&lt;/em&gt;(0), Integer::&lt;em&gt;sum&lt;/em&gt;).intValue();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, sumInject);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;reduce&lt;/strong&gt; (IntStream)&lt;/p&gt;&lt;pre&gt;// reduce does not box on IntStream&lt;br /&gt;int sumReduce = &lt;br /&gt;    intStream.get().reduce(Integer::&lt;em&gt;sum&lt;/em&gt;).getAsInt();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, sumReduce);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sum&lt;/strong&gt; (IntStream / IntList)&lt;/p&gt;&lt;pre&gt;int sum1 = intStream.get().sum();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, sum1);&lt;br /&gt;&lt;br /&gt;long sum2 = intList.sum();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, sum2);&lt;/pre&gt;&lt;p&gt;Clearly, the &lt;em&gt;sum&lt;/em&gt; methods available on IntStream and IntList are the simplest solutions. The minor difference with IntList is that the result is widened to a long which means you can add very large ints without overflowing.&lt;/p&gt;&lt;h4&gt;Summarizing an array of ints&lt;/h4&gt;&lt;p&gt;When we summarize using the IntSummaryStatistics class that was added in Java 8, we get the count, sum, min, max and average calculated at the same time. This saves you from iterating multiple times. We will use the same data as before.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;For Loop&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;IntSummaryStatistics statsForLoop = new IntSummaryStatistics();&lt;br /&gt;for (int &lt;strong&gt;i &lt;/strong&gt;= 0; &lt;strong&gt;i &lt;/strong&gt;&amp;lt; ints.length; &lt;strong&gt;i&lt;/strong&gt;++)&lt;br /&gt;{&lt;br /&gt;    statsForLoop.accept(ints[&lt;strong&gt;i&lt;/strong&gt;]);&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, statsForLoop.getSum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, statsForLoop.getMin());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, statsForLoop.getMax());&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;forEach&lt;/strong&gt; (IntStream) / &lt;strong&gt;each&lt;/strong&gt; (IntList)&lt;/p&gt;&lt;pre&gt;IntSummaryStatistics statsForEach = new IntSummaryStatistics();&lt;br /&gt;intStream.get().forEach(statsForEach::accept);&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, statsForEach.getSum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, statsForEach.getMin());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, statsForEach.getMax());&lt;br /&gt;&lt;br /&gt;IntSummaryStatistics statsEach = new IntSummaryStatistics();&lt;br /&gt;intList.each(statsEach::accept);&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, statsEach.getSum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, statsEach.getMin());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, statsEach.getMax());&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;injectInto&lt;/strong&gt; (IntList)&lt;/p&gt;&lt;pre&gt;IntSummaryStatistics statsInject =&lt;br /&gt;        intList.injectInto(&lt;br /&gt;            new IntSummaryStatistics(), &lt;br /&gt;            (iss, each) -&amp;gt; {iss.accept(each); return iss;});&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, statsInject.getSum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, statsInject.getMin());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, statsInject.getMax());&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collect&lt;/strong&gt; (IntStream)&lt;/p&gt;&lt;pre&gt;IntSummaryStatistics statsCollect =&lt;br /&gt;        intStream.get().collect(&lt;br /&gt;            IntSummaryStatistics::new, &lt;br /&gt;            IntSummaryStatistics::accept, &lt;br /&gt;            IntSummaryStatistics::combine);&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, statsCollect.getSum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, statsCollect.getMin());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, statsCollect.getMax());&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I could not use reduce because both parameters have to be the same type. I had to use collect instead, which is a mutable reduction. The collect method on primitive Streams does not take a Collector, but instead takes a Supplier, ObjectIntConsumer (accumulator) and a BiConsumer (combiner).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;summaryStatistics&lt;/strong&gt; (IntStream / IntList)&lt;/p&gt;&lt;pre&gt;IntSummaryStatistics stats1 = intStream.get().summaryStatistics();&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, stats1.getSum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, stats1.getMin());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, stats1.getMax());&lt;br /&gt;&lt;br /&gt;IntSummaryStatistics stats2 = intList.summaryStatistics();&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(15, stats2.getSum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, stats2.getMin());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(5, stats2.getMax());&lt;/pre&gt;&lt;p&gt;Again, the &lt;em&gt;summaryStatistics&lt;/em&gt; methods are the simplest solutions.&lt;/p&gt;&lt;h4&gt;Summing the lengths of an array of Strings&lt;/h4&gt;&lt;p&gt;Let’s say we want to sum the lengths of Strings in an array. This approach could be used for summing any int attribute of an object.&lt;/p&gt;&lt;p&gt;Here is the data we will use.&lt;/p&gt;&lt;pre&gt;String[] words = {&lt;strong&gt;&quot;The&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Quick&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Brown&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Fox&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;jumps&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;over&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;the&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;lazy&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;dog&quot;&lt;/strong&gt;};&lt;br /&gt;&lt;br /&gt;Supplier&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt; stream = () -&amp;gt; Stream.&lt;em&gt;of&lt;/em&gt;(&lt;em&gt;words&lt;/em&gt;);&lt;/pre&gt;&lt;pre&gt;ImmutableList&amp;lt;String&amp;gt; list = Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(words);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;For&lt;/strong&gt; &lt;strong&gt;Loop&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;int &lt;strong&gt;sumForLoop &lt;/strong&gt;= 0;&lt;br /&gt;for (int &lt;strong&gt;i &lt;/strong&gt;= 0; &lt;strong&gt;i &lt;/strong&gt;&amp;lt; words.length; &lt;strong&gt;i&lt;/strong&gt;++)&lt;br /&gt;{&lt;br /&gt;    &lt;strong&gt;sumForLoop &lt;/strong&gt;+= words[&lt;strong&gt;i&lt;/strong&gt;].length();&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, &lt;strong&gt;sumForLoop&lt;/strong&gt;);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;For&lt;/strong&gt; &lt;strong&gt;Each&lt;/strong&gt; (Stream) / &lt;strong&gt;each&lt;/strong&gt; (ImmutableList)&lt;/p&gt;&lt;pre&gt;int[] sumForEach = {0};&lt;br /&gt;stream.get().forEach(e -&amp;gt; &lt;em&gt;sumForEach&lt;/em&gt;[0] += e.length());&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumForEach[0]);&lt;br /&gt;&lt;br /&gt;int[] sumEach = {0};&lt;br /&gt;list.each(e -&amp;gt; &lt;em&gt;sumEach&lt;/em&gt;[0] += e.length());&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumEach[0]);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collectInt&lt;/strong&gt; (ImmutableList)+ &lt;strong&gt;injectInto&lt;/strong&gt; (IntList)&lt;/p&gt;&lt;pre&gt;int sumInject = list&lt;br /&gt;        .collectInt(String::length)&lt;br /&gt;        .injectInto(Integer.&lt;em&gt;valueOf&lt;/em&gt;(0), Integer::&lt;em&gt;sum&lt;/em&gt;)&lt;br /&gt;        .intValue();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumInject);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collect&lt;/strong&gt; (Stream) + &lt;strong&gt;reducing&lt;/strong&gt; (Collectors)&lt;/p&gt;&lt;pre&gt;int sumReducing = stream.get()&lt;br /&gt;        .collect(Collectors.&lt;em&gt;reducing&lt;/em&gt;(0,&lt;br /&gt;                String::length,&lt;br /&gt;                Integer::&lt;em&gt;sum&lt;/em&gt;)).intValue();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumReduce);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;mapToInt&lt;/strong&gt; (Stream) + &lt;strong&gt;Reduce&lt;/strong&gt; (IntStream)&lt;/p&gt;&lt;pre&gt;int sumReduce = stream.get()&lt;br /&gt;        .mapToInt(String::length)&lt;br /&gt;        .reduce(Integer::&lt;em&gt;sum&lt;/em&gt;)&lt;br /&gt;        .getAsInt();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumReduce);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;mapToInt&lt;/strong&gt; (Stream) + &lt;strong&gt;sum&lt;/strong&gt; (IntStream)&lt;/p&gt;&lt;pre&gt;int sum1 = stream.get()&lt;br /&gt;        .mapToInt(String::length)&lt;br /&gt;        .sum();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sum1);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collectInt&lt;/strong&gt; (ImmutableList) + &lt;strong&gt;sum &lt;/strong&gt;(IntList)&lt;/p&gt;&lt;pre&gt;long sum2 = list&lt;br /&gt;        .collectInt(String::length)&lt;br /&gt;        .sum();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sum2);&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collect&lt;/strong&gt; (Stream) + &lt;strong&gt;summingInt&lt;/strong&gt; (Collectors)&lt;/p&gt;&lt;pre&gt;Integer summingInt = stream.get()&lt;br /&gt;    .collect(Collectors.&lt;em&gt;summingInt&lt;/em&gt;(String::length));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, summingInt.intValue());&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sumOfInt&lt;/strong&gt; (ImmutableList)&lt;/p&gt;&lt;pre&gt;long sumOfInt = list.sumOfInt(String::length);&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumOfInt);&lt;/pre&gt;&lt;p&gt;I think in these examples, sumOfInt is the simplest solution.&lt;/p&gt;&lt;h4&gt;Summing the lengths of Strings grouped by the first character&lt;/h4&gt;&lt;p&gt;In this problem we will group Strings by their first character and sum the length of the Strings for each character. I will prefer to use use primitive maps here for the grouping if possible.&lt;/p&gt;&lt;p&gt;Here is the data.&lt;/p&gt;&lt;pre&gt;String[] words = {&lt;strong&gt;&quot;The&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Quick&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Brown&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Fox&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;jumps&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;over&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;the&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;lazy&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;dog&quot;&lt;/strong&gt;};&lt;br /&gt;&lt;br /&gt;Supplier&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt; stream = &lt;br /&gt;    () -&amp;gt; Stream.&lt;em&gt;of&lt;/em&gt;(&lt;em&gt;words&lt;/em&gt;).map(String::toLowerCase);&lt;/pre&gt;&lt;pre&gt;ImmutableList&amp;lt;String&amp;gt; list =&lt;br /&gt;    Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(words).collect(String::toLowerCase);&lt;/pre&gt;&lt;p&gt;The Stream and ImmutableList strings are converted to lowercase using map and collect, respectively. We will do this manually in the for loop example.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;For&lt;/strong&gt; &lt;strong&gt;Loop&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;MutableCharIntMap sumByForLoop = new CharIntHashMap();&lt;br /&gt;for (int &lt;strong&gt;i &lt;/strong&gt;= 0; &lt;strong&gt;i &lt;/strong&gt;&amp;lt; words.length; &lt;strong&gt;i&lt;/strong&gt;++)&lt;br /&gt;{&lt;br /&gt;    String word = words[&lt;strong&gt;i&lt;/strong&gt;].toLowerCase();&lt;br /&gt;    sumByForLoop.addToValue(word.charAt(0), word.length());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByForLoop.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByForLoop.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;for&lt;/strong&gt; &lt;strong&gt;Each&lt;/strong&gt; (Stream) / &lt;strong&gt;each&lt;/strong&gt; (ImmutableList)&lt;/p&gt;&lt;pre&gt;MutableCharIntMap sumByForEach = new CharIntHashMap();&lt;br /&gt;stream.get().forEach(&lt;br /&gt;    e -&amp;gt; &lt;em&gt;sumByForEach&lt;/em&gt;.addToValue(e.charAt(0), e.length()));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByForEach.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByForEach.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;br /&gt;&lt;br /&gt;MutableCharIntMap sumByEach = new CharIntHashMap();&lt;br /&gt;list.each(&lt;br /&gt;    e -&amp;gt; &lt;em&gt;sumByEach&lt;/em&gt;.addToValue(e.charAt(0), e.length()));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByEach.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByEach.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;injectInto&lt;/strong&gt; (ImmutableList)&lt;/p&gt;&lt;pre&gt;MutableCharIntMap sumByInject =&lt;br /&gt;        list.injectInto(&lt;br /&gt;                new CharIntHashMap(),&lt;br /&gt;                (map, each) -&amp;gt; {&lt;br /&gt;                    map.addToValue(each.charAt(0), each.length());&lt;br /&gt;                    return map;&lt;br /&gt;                });&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByInject.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByInject.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;reduce&lt;/strong&gt; (Stream)&lt;/p&gt;&lt;pre&gt;MutableCharIntMap sumByReduce = stream.get()&lt;br /&gt;        .reduce(&lt;br /&gt;                new CharIntHashMap(),&lt;br /&gt;                (map, e) -&amp;gt; {&lt;br /&gt;                    map.addToValue(e.charAt(0), e.length());&lt;br /&gt;                    return map;&lt;br /&gt;                },&lt;br /&gt;                (map1, map2) -&amp;gt; {&lt;br /&gt;                    map1.putAll(map2);&lt;br /&gt;                    return map1;&lt;br /&gt;                });&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByReduce.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByReduce.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;aggregateBy&lt;/strong&gt; (ImmutableList)&lt;/p&gt;&lt;pre&gt;ImmutableMap&amp;lt;Character, Long&amp;gt; aggregateBy = list.aggregateBy(&lt;br /&gt;        word -&amp;gt; word.charAt(0),&lt;br /&gt;        () -&amp;gt; new Long(0),&lt;br /&gt;        (sum, each) -&amp;gt; sum + each.length());&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35,&lt;br /&gt;    aggregateBy.valuesView().sumOfLong(Long::longValue));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, aggregateBy.get(&lt;strong&gt;'t'&lt;/strong&gt;).longValue());&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;aggregateInPlaceBy&lt;/strong&gt; (ImmutableList)&lt;/p&gt;&lt;pre&gt;ImmutableMap&amp;lt;Character, LongAdder&amp;gt; aggregateInPlaceBy = &lt;br /&gt;        list.aggregateInPlaceBy(&lt;br /&gt;                word -&amp;gt; word.charAt(0),&lt;br /&gt;                LongAdder::new,&lt;br /&gt;                (adder, each) -&amp;gt; adder.add(each.length()));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35,&lt;br /&gt;    aggregateInPlaceBy.valuesView()&lt;br /&gt;        .sumOfLong(LongAdder::longValue));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, aggregateInPlaceBy.get(&lt;strong&gt;'t'&lt;/strong&gt;).longValue());&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collect&lt;/strong&gt; (Stream)&lt;/p&gt;&lt;pre&gt;MutableCharIntMap sumByCollect = stream.get().collect(&lt;br /&gt;        CharIntHashMap::new,&lt;br /&gt;        (map, e) -&amp;gt; map.addToValue(e.charAt(0), e.length()),&lt;br /&gt;        CharIntHashMap::putAll);&lt;br /&gt;&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByCollect.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByCollect.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collect&lt;/strong&gt; (Stream) + &lt;strong&gt;groupingBy&lt;/strong&gt; (Collectors) + &lt;strong&gt;summingInt&lt;/strong&gt; (Collectors)&lt;/p&gt;&lt;pre&gt;Map&amp;lt;Character, Integer&amp;gt; sumByCollectSummingInt =&lt;br /&gt;        stream.get()&lt;br /&gt;                .collect(Collectors.&lt;em&gt;groupingBy&lt;/em&gt;(&lt;br /&gt;                        word -&amp;gt; word.charAt(0),&lt;br /&gt;                        Collectors.&lt;em&gt;summingInt&lt;/em&gt;(String::length)));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;    35,&lt;br /&gt;    sumByCollectSummingInt&lt;br /&gt;        .values().stream().mapToInt(Integer::intValue).sum());&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;    Integer.&lt;em&gt;valueO&lt;/em&gt;(6), sumByCollectSummingInt.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;collect&lt;/strong&gt; (Stream) + &lt;strong&gt;sumByInt&lt;/strong&gt; (Collectors2)&lt;/p&gt;&lt;pre&gt;ObjectLongMap&amp;lt;Character&amp;gt; sumByCollectors2 =&lt;br /&gt;        stream.get().collect(&lt;br /&gt;                Collectors2.&lt;em&gt;sumByInt&lt;/em&gt;(&lt;br /&gt;                    word -&amp;gt; word.charAt(0), String::length));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByCollectors2.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByCollectors2.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;reduceInPlace&lt;/strong&gt; (ImmutableList)+ &lt;strong&gt;sumByInt &lt;/strong&gt;(Collectors2)&lt;/p&gt;&lt;pre&gt;ObjectLongMap&amp;lt;Character&amp;gt; reduceInPlaceCollectors2 =&lt;br /&gt;        list.reduceInPlace(&lt;br /&gt;                Collectors2.&lt;em&gt;sumByInt&lt;/em&gt;(&lt;br /&gt;                    e -&amp;gt; e.charAt(0), String::length));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, reduceInPlaceCollectors2.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, reduceInPlaceCollectors2.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sumByInt&lt;/strong&gt; (ImmutableList)&lt;/p&gt;&lt;pre&gt;ObjectLongMap&amp;lt;Character&amp;gt; sumByInt =&lt;br /&gt;        list.sumByInt(e -&amp;gt; e.charAt(0), String::length);&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(35, sumByInt.values().sum());&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(6, sumByInt.get(&lt;strong&gt;'t'&lt;/strong&gt;));&lt;/pre&gt;&lt;p&gt;The simplest solution here is sumByInt.&lt;/p&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;&lt;p&gt;We’ve covered a lot of different approaches you can use to sum or summarize values using Java and Eclipse Collections. In the case of summing, using a method with sum in the name will probably give you the simplest solution. You can solve almost any problem using methods like injectInto and reduceInPlace (Eclipse Collections) or collect (Java Stream). Methods like reduce are less useful when your result needs to be different than your input. Methods like aggregateBy and aggregateInPlaceBy give you a more specific result than collect because they always return a Map. Using Collectors2 can be helpful if you want to iterate over a Stream and get a primitive map result easily using collect.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=d46dfd334704&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 02 Feb 2018 02:46:27 +0000</pubDate>
</item>
<item>
	<title>Geniutec: Eclipse — Still the Best IDE!</title>
	<guid isPermaLink="false">https://www.genuitec.com/?p=548306</guid>
	<link>https://www.genuitec.com/eclipse-still-best-ide/</link>
	<description>&lt;p&gt;As a developer, you’ve probably grown to love using an IDE — but in the modern coding universe of choices, how do you choose the best IDE? While some might try to convince you that the “cool kids” are using IntelliJ, whether you’re looking for your first IDE, or being pressured into switching, here are some reasons […]&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://www.genuitec.com/eclipse-still-best-ide/&quot; rel=&quot;nofollow&quot;&gt;Eclipse — Still the Best IDE!&lt;/a&gt; appeared first on &lt;a href=&quot;https://www.genuitec.com&quot; rel=&quot;nofollow&quot;&gt;Genuitec&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 31 Jan 2018 07:07:38 +0000</pubDate>
</item>
<item>
	<title>David Bosschaert: Blockchain Smart Contracts are the new Serverless!</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-9210566578097047576.post-2723035785943132788</guid>
	<link>http://coderthoughts.blogspot.com/2018/01/blockchain-smart-contracts-are-new.html</link>
	<description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;/div&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;float: right; margin-left: 1em; text-align: right;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-AqbgUS9H8WY/Wm-OGt3a9UI/AAAAAAAAD_k/9HoNVNQsAVADMnuBZ3N0AYyuo5eXD9jRACEwYBhgL/s1600/Michael_Bacina_how-smart-contracts-work.png&quot; style=&quot;clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;89&quot; src=&quot;https://1.bp.blogspot.com/-AqbgUS9H8WY/Wm-OGt3a9UI/AAAAAAAAD_k/9HoNVNQsAVADMnuBZ3N0AYyuo5eXD9jRACEwYBhgL/s200/Michael_Bacina_how-smart-contracts-work.png&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Smart Contracts (thanks to Michael Bacina)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Over the recent past I've been experimenting with Smart Contracts for block chain implementations. Smart Contracts are essentially programs running on the block chain infrastructure. For example Ethereum supports Smart Contracts written in Solidity. EOS is another example of a blockchain that will support smart contracts. I've been looking at EOS an its smart contracts in more detail, here the smart contracts can be written in C/C++ so you don't have to learn a new language for it.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;float: left; margin-right: 1em; text-align: left;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-8TtRjuAJaww/WnDhfzAXmBI/AAAAAAAAEAE/0DLIr0S5amsCsQYbuciOWcuCmczNj3a0wCLcBGAs/s1600/Ethereum.png_1512566634.jpg&quot; style=&quot;clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;https://3.bp.blogspot.com/-8TtRjuAJaww/WnDhfzAXmBI/AAAAAAAAEAE/0DLIr0S5amsCsQYbuciOWcuCmczNj3a0wCLcBGAs/s200/Ethereum.png_1512566634.jpg&quot; width=&quot;200&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;A CryptoKitty&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;So what can you do with a smart contract? Smart contracts are designed to provide some sort of computation and store the result (immutably) on the blockchain. The computation is a custom program that applies to your domain, so for example you could be renting out holiday accommodation and your website might store the holiday home rental contract including the price, optional extras, insurance etc for a given period of time, after having computed it, on the blockchain. In most cases smart contracts can also handle the payment, so let's say the rental home costs 500 Euro per week, then the equivalent in Ether (ETH) or whatever the current blockchain/crypto is, can be transferred to the owner as part of the smart contract execution.&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;/div&gt;Or, more creatively as has been done on the ethereum network, your contract could compute a unique CryptoKitty for you that is a cute looking creature created just for you to look at and store the result on the blockchain.&lt;br /&gt;&lt;br /&gt;You can even take this a little bit further. As shown with the CryptoKitty the smart contract does not need to have anything to do with transferring money from &lt;i&gt;a&lt;/i&gt; to &lt;i&gt;b&lt;/i&gt; or writing some sort of financial contract. In theory you could use the smart contract to do anything you might be able to use asynchronous computing power for.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;After playing briefly with Solidity, the smart contract language for Ethereum I moved to play a bit more with EOS smart contracts. Why EOS? EOS as a blockchain is still in it's early phase and under heavy development although they do have a test network up and running at this stage. However I find EOS interesting because it has a couple of interesting aspects:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://eos.io/images/dawn_2.0-logo.png&quot; style=&quot;clear: left; float: left; margin-bottom: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;200&quot; src=&quot;https://eos.io/images/dawn_2.0-logo.png&quot; width=&quot;133&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;First of all it's quite easy to run a test EOS node on your own machine which allows you as a developer to play with it and understand it in a sandbox type environment.&lt;/li&gt;&lt;li&gt;EOS aims to provide much higher transaction rates than the current major block chains can provide. It promises up to 50000 transactions per second which all of a sudden is big enough to handle amounts of payments similar to major credit card companies like Visa and Mastercard.&lt;/li&gt;&lt;li&gt;Smart contracts on EOS can be written in C/C++ which is really nice, as you don't need to learn a new programming language for it.&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div&gt;So let's take a look at how I got my example EOS contract deployed to my own test EOS node.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Build the EOS code&lt;/h3&gt;I tried this on Ubuntu 16.04. Compile the EOS code base:&lt;br /&gt;&lt;br /&gt;First, clone the EOS code&lt;br /&gt;&lt;span&gt;  ~$ git clone https://github.com/eosio/eos ~/eos&lt;br /&gt;  &lt;/span&gt;&lt;span&gt;~$ &lt;/span&gt;&lt;span&gt;cd eos&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Then build the whole lot:&lt;/div&gt;&lt;div&gt;&lt;span&gt;  ~/eos$ ./build.sh ubuntu full&lt;/span&gt;&lt;br /&gt;This takes a while but once it's finished you should be able to run your EOS node:&lt;br /&gt;&lt;span&gt;  ~/eos/build/programs/eosiod$ ./&lt;/span&gt;&lt;span&gt;eosiod&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;It now exits with an error. You need to set up &lt;span&gt;data-dir/config.ini&lt;/span&gt; as described in the EOS docs: &lt;a href=&quot;https://github.com/EOSIO/eos&quot;&gt;https://github.com/EOSIO/eos&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;At this point your EOS node should be happily up and running. Which is really neat. You've got a EOS block chain node running for development purposes on your local machine!&lt;br /&gt;&lt;br /&gt;&lt;span&gt;~/eos/build/programs/eosiod $ ./eosiod &lt;/span&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-5ozj96C3noA/Wm-Q9Yn2tpI/AAAAAAAAD_0/rx2h9zXzJMkqNdqew15Hj28OxelKm7OBwCEwYBhgL/s1600/eosnode.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;130&quot; src=&quot;https://4.bp.blogspot.com/-5ozj96C3noA/Wm-Q9Yn2tpI/AAAAAAAAD_0/rx2h9zXzJMkqNdqew15Hj28OxelKm7OBwCEwYBhgL/s400/eosnode.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Before you can use your EOS node you need to create a wallet and an account. Since our smart contract will be computing the Fibonacci sequence, I'm going to call the account &lt;b&gt;fibonacci&lt;/b&gt;. The following commands do that for you. They use a demo account &lt;b&gt;inita&lt;/b&gt; that is created in the &lt;span&gt;config.ini&lt;/span&gt; file when its set up as above.&lt;br /&gt;&lt;br /&gt;Here we use the &lt;span&gt;eosioc&lt;/span&gt; program which is a client to the EOS network:&lt;br /&gt;&lt;span&gt;~/eos/build/programs/eosioc $ ./eosioc wallet create&lt;/span&gt;&lt;br /&gt;&lt;span&gt;~/eos/build/programs/eosioc $ ./eosioc wallet open&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Import the inita demo key:&lt;br /&gt;&lt;span&gt;~/eos/build/programs/eosioc $ ./eosioc wallet import 5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Create two private keys for the fibonacci account:&lt;br /&gt;&lt;div&gt;&lt;span&gt;~/eos/build/programs/eosioc $ ./eosioc create key&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Private key:###&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Public key: ###&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;~/eos/build/programs/eosioc $ ./eosioc create key&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Private key:###&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;Public key: ###&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Create the fibonacci account:&lt;br /&gt;&lt;span&gt;~/eos/build/programs/eosioc $ ./eosioc create account inita fibonacci  {private key1} {private key2}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Create the smart contract&lt;/h3&gt;I created a little testproject called &lt;i&gt;fibonacci&lt;/i&gt; which computes the fibonacci sequence to a certain iteration in the EOS smart contract and stores the result in the EOS database.&lt;br /&gt;&lt;br /&gt;The code can be found in github here: &lt;a href=&quot;https://github.com/coderthoughts/fibonacci&quot;&gt;https://github.com/coderthoughts/fibonacci&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;It exists of two components: an external contract, in the &lt;a href=&quot;https://github.com/coderthoughts/fibonacci/blob/master/fibonacci.abi&quot;&gt;fibonacci.abi file&lt;/a&gt; which defines how the application communicates with the outside world. The actual communication typically happens in JSON:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &quot;structs&quot;: [{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;      &quot;name&quot;: &quot;compute&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;      &quot;base&quot;: &quot;&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;      &quot;fields&quot;: {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        &quot;iterations&quot;: &quot;uint64&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;      }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;  },{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;name&quot;: &quot;result&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;base&quot;: &quot;&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;   &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;fields&quot;: {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;id&quot;: &quot;name&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;     &lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&quot;value&quot;: &quot;uint64&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;  }],&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &quot;actions&quot;: [{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &quot;action_name&quot;: &quot;compute&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &quot;type&quot;: &quot;compute&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;  }],&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;  &quot;tables&quot;: [{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &quot;table_name&quot;: &quot;results&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &quot;type&quot;: &quot;result&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &quot;index_type&quot;: &quot;i64&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &quot;key_names&quot;: [&quot;id&quot;],&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    &quot;key_types&quot;: [&quot;name&quot;]&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;  }]&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;}&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;And there is the &lt;a href=&quot;https://github.com/coderthoughts/fibonacci/blob/master/fibonacci.cpp&quot;&gt;fibonacci.cpp file&lt;/a&gt; that contains the source code in C++ of the contract. The main bit of the C++ contract is just the apply() method that gets invoked when the EOS Smart Contract receives a message:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span&gt;    uint64_t fibonacci(uint64_t iterations) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        uint64_t first = 0;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        uint64_t second = 1;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        if (iterations == 0)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            return 0;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        eosio::print(&quot;1 &quot;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        for (uint64_t i=1; i &amp;lt; iterations; i++) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            uint64_t res = first + second;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            first = second;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            second = res;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            eosio::print(res, &quot; &quot;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        return second;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    /// The apply method implements the dispatch of events to this contract&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    void apply(uint64_t code, uint64_t action) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        if (action == N(compute)) {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            auto message = eosio::current_message&amp;lt;compute&amp;gt;();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            eosio::print(&quot;Calling fibonacci\n&quot;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            uint64_t num = fibonacci(message.iterations);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            result res(eosio::name(code), num);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            Results::store(res, res.id);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;            eosio::print(&quot;Stored result in database\n&quot;);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;        }&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are also specific EOS libraries available, the documentation is here: &lt;a href=&quot;https://eosio.github.io/eos/group__contractdev.html&quot;&gt;https://eosio.github.io/eos/group__contractdev.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;Deploy your own smart contract&lt;/h3&gt;An interesting part of the EOS smart contract development lifecycle is that these contract don't get compiled in regular machine language, what C++ compilers normally do, but it gets compiles into a WebAssembly .wast file. This file is some sort of assembler language but then platform independent and this is what EOS uses at runtime. &lt;br /&gt;&lt;br /&gt;Once deployed, you can execute your contract by sending a message to it. The contract executes and can write its output to a database location for later retrieval by a client.&lt;br /&gt;&lt;br /&gt;The easiest way to compile the fibonacci source is to put the files with the other example smart contracts in the EOS codebase, in the &lt;i&gt;contracts &lt;/i&gt;directory. Then you've got everything in the path as the compiler expects it:&lt;br /&gt;&lt;br /&gt;Compile the project:&lt;br /&gt;&lt;span&gt;~/eos/contracts$ ../build/tools/eoscpp -o fibonacci/fibonacci.wast fibonacci/fibonacci.cpp&lt;/span&gt;&lt;br /&gt;Upload the fibonacci smart contract to the EOS node:&lt;br /&gt;&lt;span&gt;~/eos/contracts$ eosioc set contract fibonacci fibonacci/fibonacci.wast fibonacci/fibonacci.abi&lt;/span&gt;&lt;br /&gt;Now we can start executing it. Lets run the fibonacci compute for 8 iterations and store the result:&lt;br /&gt;&lt;span&gt;~/eos/contracts$ eosioc push message fibonacci compute '{&quot;iterations&quot;:8}' -S fibonacci&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;On the EOS demon console you can see some debug output from the smart contract&lt;br /&gt;&lt;br /&gt;&lt;span&gt;&amp;gt; Calling fibonacci&lt;br /&gt;&amp;gt; 1 1 2 3 5 8 13 21 Stored result&lt;/span&gt;&lt;br /&gt;However a real user will obviously never be able to see this. So to obtain the result of the computation, we'll look it up in the EOS database:&lt;br /&gt;&lt;br /&gt;&lt;span&gt;/build/programs/eosioc$ ./eosioc get table  fibonacci fibonacci &lt;/span&gt;&lt;span&gt;results &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;br /&gt;&lt;div&gt;&lt;span&gt;{&lt;/span&gt;&lt;/div&gt;&lt;span&gt;&lt;div&gt;  &quot;rows&quot;: [{&lt;/div&gt;&lt;div&gt;      &quot;id&quot;: &quot;fibonacci&quot;,&lt;/div&gt;&lt;div&gt;      &quot;value&quot;: 21&lt;/div&gt;&lt;div&gt;    }&lt;/div&gt;&lt;div&gt;  ],&lt;/div&gt;&lt;div&gt;  &quot;more&quot;: false&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/span&gt;&lt;br /&gt;So the result is 21. We've executed our smart contract and obtained the result on the EOS blockchain!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;Conclusion&lt;/h3&gt;I'm pretty excited by the possibilities of smart contracts with regard to the possibilities that these, once matured, can provide. It becomes similar to what today is labeled 'serverless' computing. Things that are at the moment possible through large providers such as Amazon Lambda and Microsoft Azure Functions will also be provided via block chain networks. One difference is that the computation is not done by a single cloud entity, but rather by a collection of nodes that are run by individuals who have mining machines for that crypto. In my eyes it's still early days and certain things in the contracts can certainly be improved, e.g. the available APIs usable from within the smart contracts are still fairly limited, but that will probably improve over time. The fun thing is: it's pretty easy to get started experimenting and writing smart contracts, even from a simple Linux box, so you can learn and develop your smart contracts while the blockchain teams are working on maturing the infrastructure.&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 30 Jan 2018 21:20:37 +0000</pubDate>
	<author>noreply@blogger.com (David Bosschaert)</author>
</item>
<item>
	<title>Chris Aniszczyk: Winding Down an Open Source Project</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4182</guid>
	<link>http://aniszczyk.org/2018/01/30/winding-down-an-open-source-project/</link>
	<description>&lt;p&gt;For 2018, I’ve made a &lt;strong&gt;commitment to myself to simply WRITE AND SHARE more&lt;/strong&gt;. I used to be really good at cranking out posts but I’ve been so heads down in running and building out open source foundations that I’ve neglected sharing what I’ve learned over the years. I recently wrote a post about the process of starting an open source program for your company:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;wrote about creating an open source program for your company and linked to a bunch of resources from the &lt;a href=&quot;https://twitter.com/todogroup?ref_src=twsrc%5Etfw&quot;&gt;@todogroup&lt;/a&gt; &lt;a href=&quot;https://t.co/nWC5wwjire&quot;&gt;https://t.co/nWC5wwjire&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Chris Aniszczyk (@cra) &lt;a href=&quot;https://twitter.com/cra/status/956565395749654529?ref_src=twsrc%5Etfw&quot;&gt;January 25, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Also yesterday we posted a new open source program guide in the &lt;a href=&quot;http://todogroup.org&quot;&gt;TODO Group&lt;/a&gt; about what to do when you unfortunately wind down an open source project:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;new open source program guide: &quot;Shutting Down An Open Source Project&quot; &lt;a href=&quot;https://t.co/vLLpcTrokw&quot;&gt;https://t.co/vLLpcTrokw&lt;/a&gt; &lt;a href=&quot;https://t.co/rVt3jlb7V9&quot;&gt;pic.twitter.com/rVt3jlb7V9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— TODO Group (@todogroup) &lt;a href=&quot;https://twitter.com/todogroup/status/958020764862746624?ref_src=twsrc%5Etfw&quot;&gt;January 29, 2018&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;While some open source foundations have well defined project lifecycles with notions of an “attic” or “archive” – many companies who open source projects generally do not.&lt;/p&gt;
&lt;p&gt;Anyways, I hope these articles are useful to you and you learn something new &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 30 Jan 2018 14:29:46 +0000</pubDate>
</item>
<item>
	<title>InfoQ Eclipse feed: Public Review of Java MVC 1.0 Specification is Now Open</title>
	<guid isPermaLink="true">http://www.infoq.com/news/2018/01/mvc-1.0-public-review?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>http://www.infoq.com/news/2018/01/mvc-1.0-public-review?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;http://www.infoq.com/styles/i/logo_bigger.jpg&quot; /&gt;&lt;p&gt;Public review of JSR-371, Model-View-Controller (MVC) version 1.0 specification, is now open. The latest features include support for data binding and internationalization. Eclipse Ozark, a full implementation of MVC 1.0, is expected to release version 1.0 in conjunction with the final release of JSR-371. Ivar Grimstad, principal consultant for the Cybercom Group, spoke to InfoQ about MVC 1.0.
&lt;/p&gt; &lt;i&gt;By Michael Redlich&lt;/i&gt;</description>
	<pubDate>Mon, 29 Jan 2018 08:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat Developer Studio for Eclipse Oxygen.2</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/11.2.0.ga-for-oxygen.2.html</guid>
	<link>https://tools.jboss.org/blog/11.2.0.ga-for-oxygen.2.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/oxygen/4.5.2.Final.html&quot;&gt;JBoss Tools 4.5.2&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/oxygen/11.2.0.GA.html&quot;&gt;Red Hat JBoss Developer Studio 11.2&lt;/a&gt; for Eclipse Oxygen.2 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio11&quot; src=&quot;https://tools.jboss.org/blog/images/devstudio11.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://www.jboss.org/products/devstudio.html&quot;&gt;JBoss Products page&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar jboss-devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) JBoss Developer Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.7 (Oxygen) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/oxygen2&quot;&gt;Eclipse 4.7.2 Oxygen JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat JBoss Developer Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/oxygen/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was on adoption of Java9, improvements for container based development and bug fixing.
      Eclipse Oxygen itself has &lt;a href=&quot;https://www.youtube.com/playlist?list=PLy7t4z5SYNaTM66CahSlkMh5YkndYXMUq&quot;&gt;a lot of new cool stuff&lt;/a&gt; but let me highlight just a few updates in both Eclipse Oxygen and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;spring-boot-applications-support-in-openshift-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#spring-boot-applications-support-in-openshift-server-adapter&quot;&gt;&lt;/a&gt;Spring Boot applications support in OpenShift server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The OpenShift server adapter allowed hotdeploy and debugging for JEE and NodeJS based applications.
      It now supports Spring Boot applications with some limitations: the Spring Boot devtools module must be added to your application as it monitors code changes and as the application must be launched in exploded mode, you must use the upstream image (docker.io/fabric8/s2i-java) rather than the downstream image builder fis-java-openshift.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As an example, we’ve provided an OpenShift template that will create an OpenShift application based on the upstream application and a Git repository that added the Spring Boot devtools to the Fabric8 Spring Boot quickstart.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;{
        &quot;apiVersion&quot;: &quot;v1&quot;,
        &quot;kind&quot;: &quot;Template&quot;,
        &quot;metadata&quot;: {
          &quot;annotations&quot;: {
            &quot;description&quot;: &quot;Spring-Boot and CXF JAXRS QuickStart. This example demonstrates how you can use Apache CXF JAXRS with Spring Boot on Openshift. The quickstart uses Spring Boot to configure a little application that includes a CXF JAXRS endpoint with Swagger enabled.&quot;,
            &quot;tags&quot;: &quot;quickstart,java,springboot,fis&quot;,
            &quot;iconClass&quot;: &quot;icon-jboss&quot;,
            &quot;version&quot;: &quot;2.0&quot;
          },
          &quot;name&quot;: &quot;s2i-spring-boot-cxf-jaxrs&quot;
        },
        &quot;labels&quot;: {
          &quot;template&quot;: &quot;s2i-spring-boot-cxf-jaxrs&quot;
        },
        &quot;parameters&quot;: [
          {
            &quot;name&quot;: &quot;APP_NAME&quot;,
            &quot;displayName&quot;: &quot;Application Name&quot;,
            &quot;required&quot;: true,
            &quot;value&quot;: &quot;s2i-spring-boot-cxf-jaxrs&quot;,
            &quot;description&quot;: &quot;The name assigned to the application.&quot;
          },
          {
            &quot;name&quot;: &quot;GIT_REPO&quot;,
            &quot;displayName&quot;: &quot;Git Repository URL&quot;,
            &quot;required&quot;: true,
            &quot;value&quot;: &quot;https://github.com/jeffmaury/spring-boot-cxf-jaxrs.git&quot;,
            &quot;description&quot;: &quot;The URL of the repository with your application source code.&quot;
          },
          {
            &quot;name&quot;: &quot;GIT_REF&quot;,
            &quot;displayName&quot;: &quot;Git Reference&quot;,
            &quot;value&quot;: &quot;hotdeploy&quot;,
            &quot;description&quot;: &quot;Set this to a branch name, tag or other ref of your repository if you are not using the default branch.&quot;
          },
          {
            &quot;name&quot;: &quot;SERVICE_NAME&quot;,
            &quot;displayName&quot;: &quot;Service Name&quot;,
            &quot;value&quot;: &quot;cxf-jaxrs&quot;,
            &quot;description&quot;: &quot;Exposed service name.&quot;
          },
          {
            &quot;name&quot;: &quot;BUILDER_VERSION&quot;,
            &quot;displayName&quot;: &quot;Builder version&quot;,
            &quot;value&quot;: &quot;2.0&quot;,
            &quot;description&quot;: &quot;The version of the FIS S2I builder image to use.&quot;
          },
          {
            &quot;name&quot;: &quot;APP_VERSION&quot;,
            &quot;displayName&quot;: &quot;Application Version&quot;,
            &quot;value&quot;: &quot;1.0.0.redhat-000014&quot;,
            &quot;description&quot;: &quot;The application version.&quot;
          },
          {
            &quot;name&quot;: &quot;MAVEN_ARGS&quot;,
            &quot;displayName&quot;: &quot;Maven Arguments&quot;,
            &quot;value&quot;: &quot;package -DskipTests -Dfabric8.skip -e -B&quot;,
            &quot;description&quot;: &quot;Arguments passed to mvn in the build.&quot;
          },
          {
            &quot;name&quot;: &quot;MAVEN_ARGS_APPEND&quot;,
            &quot;displayName&quot;: &quot;Extra Maven Arguments&quot;,
            &quot;description&quot;: &quot;Extra arguments passed to mvn, e.g. for multi-module builds.&quot;
          },
          {
            &quot;name&quot;: &quot;ARTIFACT_DIR&quot;,
            &quot;displayName&quot;: &quot;Maven build directory&quot;,
            &quot;description&quot;: &quot;Directory of the artifact to be built, e.g. for multi-module builds.&quot;
          },
          {
            &quot;name&quot;: &quot;IMAGE_STREAM_NAMESPACE&quot;,
            &quot;displayName&quot;: &quot;Image Stream Namespace&quot;,
            &quot;value&quot;: &quot;openshift&quot;,
            &quot;required&quot;: true,
            &quot;description&quot;: &quot;Namespace in which the Fuse ImageStreams are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you&amp;amp;aposve installed the ImageStreams in a different namespace/project.&quot;
          },
          {
            &quot;name&quot;: &quot;BUILD_SECRET&quot;,
            &quot;displayName&quot;: &quot;Git Build Secret&quot;,
            &quot;generate&quot;: &quot;expression&quot;,
            &quot;description&quot;: &quot;The secret needed to trigger a build.&quot;,
            &quot;from&quot;: &quot;[a-zA-Z0-9]{40}&quot;
          },
          {
            &quot;name&quot;: &quot;CPU_REQUEST&quot;,
            &quot;displayName&quot;: &quot;CPU request&quot;,
            &quot;value&quot;: &quot;0.2&quot;,
            &quot;required&quot;: true,
            &quot;description&quot;: &quot;The amount of CPU to requests.&quot;
          },
          {
            &quot;name&quot;: &quot;CPU_LIMIT&quot;,
            &quot;displayName&quot;: &quot;CPU limit&quot;,
            &quot;value&quot;: &quot;1.0&quot;,
            &quot;required&quot;: true,
            &quot;description&quot;: &quot;The amount of CPU the container is limited to use.&quot;
          }
        ],
        &quot;objects&quot;: [
          {
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;kind&quot;: &quot;Route&quot;,
            &quot;metadata&quot;: {
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;
              },
              &quot;name&quot;: &quot;${SERVICE_NAME}-route&quot;
            },
            &quot;spec&quot;: {
              &quot;to&quot;: {
                &quot;kind&quot;: &quot;Service&quot;,
                &quot;name&quot;: &quot;${SERVICE_NAME}&quot;
              }
            }
          },
          {
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;kind&quot;: &quot;Service&quot;,
            &quot;metadata&quot;: {
              &quot;annotations&quot;: {
              },
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;
              },
              &quot;name&quot;: &quot;${SERVICE_NAME}&quot;
            },
            &quot;spec&quot;: {
              &quot;clusterIP&quot;: &quot;None&quot;,
              &quot;deprecatedPublicIPs&quot;: [],
              &quot;ports&quot;: [
                {
                  &quot;port&quot;: 9413,
                  &quot;protocol&quot;: &quot;TCP&quot;,
                  &quot;targetPort&quot;: 8080
                }
              ],
              &quot;selector&quot;: {
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;
              }
            }
          },
          {
            &quot;kind&quot;: &quot;ImageStream&quot;,
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;metadata&quot;: {
              &quot;name&quot;: &quot;${APP_NAME}&quot;,
              &quot;creationTimestamp&quot;: null,
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              }
            },
            &quot;spec&quot;: {},
            &quot;status&quot;: {
              &quot;dockerImageRepository&quot;: &quot;&quot;
            }
          },
          {
            &quot;kind&quot;: &quot;BuildConfig&quot;,
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;metadata&quot;: {
              &quot;name&quot;: &quot;${APP_NAME}&quot;,
              &quot;creationTimestamp&quot;: null,
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              }
            },
            &quot;spec&quot;: {
              &quot;triggers&quot;: [
                {
                  &quot;type&quot;: &quot;GitHub&quot;,
                  &quot;github&quot;: {
                    &quot;secret&quot;: &quot;${BUILD_SECRET}&quot;
                  }
                },
                {
                  &quot;type&quot;: &quot;Generic&quot;,
                  &quot;generic&quot;: {
                    &quot;secret&quot;: &quot;${BUILD_SECRET}&quot;
                  }
                },
                {
                  &quot;type&quot;: &quot;ConfigChange&quot;
                },
                {
                  &quot;type&quot;: &quot;ImageChange&quot;,
                  &quot;imageChange&quot;: {}
                }
              ],
              &quot;source&quot;: {
                &quot;type&quot;: &quot;Git&quot;,
                &quot;git&quot;: {
                  &quot;uri&quot;: &quot;${GIT_REPO}&quot;,
                  &quot;ref&quot;: &quot;${GIT_REF}&quot;
                }
              },
              &quot;strategy&quot;: {
                &quot;type&quot;: &quot;Source&quot;,
                &quot;sourceStrategy&quot;: {
                  &quot;from&quot;: {
                    &quot;kind&quot;: &quot;DockerImage&quot;,
                    &quot;name&quot;: &quot;fabric8/s2i-java:${BUILDER_VERSION}&quot;
                  },
                  &quot;forcePull&quot;: true,
                  &quot;incremental&quot;: true,
                  &quot;env&quot;: [
                    {
                      &quot;name&quot;: &quot;BUILD_LOGLEVEL&quot;,
                      &quot;value&quot;: &quot;5&quot;
                    },
                    {
                      &quot;name&quot;: &quot;ARTIFACT_DIR&quot;,
                      &quot;value&quot;: &quot;${ARTIFACT_DIR}&quot;
                    },
                    {
                      &quot;name&quot;: &quot;MAVEN_ARGS&quot;,
                      &quot;value&quot;: &quot;${MAVEN_ARGS}&quot;
                    },
                    {
                      &quot;name&quot;: &quot;MAVEN_ARGS_APPEND&quot;,
                      &quot;value&quot;: &quot;${MAVEN_ARGS_APPEND}&quot;
                    }
                  ]
                }
              },
              &quot;output&quot;: {
                &quot;to&quot;: {
                  &quot;kind&quot;: &quot;ImageStreamTag&quot;,
                  &quot;name&quot;: &quot;${APP_NAME}:latest&quot;
                }
              },
              &quot;resources&quot;: {}
            },
            &quot;status&quot;: {
              &quot;lastVersion&quot;: 0
            }
          },
          {
            &quot;kind&quot;: &quot;DeploymentConfig&quot;,
            &quot;apiVersion&quot;: &quot;v1&quot;,
            &quot;metadata&quot;: {
              &quot;name&quot;: &quot;${APP_NAME}&quot;,
              &quot;creationTimestamp&quot;: null,
              &quot;labels&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              }
            },
            &quot;spec&quot;: {
              &quot;strategy&quot;: {
                &quot;resources&quot;: {}
              },
              &quot;triggers&quot;: [
                {
                  &quot;type&quot;: &quot;ConfigChange&quot;
                },
                {
                  &quot;type&quot;: &quot;ImageChange&quot;,
                  &quot;imageChangeParams&quot;: {
                    &quot;automatic&quot;: true,
                    &quot;containerNames&quot;: [
                      &quot;${APP_NAME}&quot;
                    ],
                    &quot;from&quot;: {
                      &quot;kind&quot;: &quot;ImageStreamTag&quot;,
                      &quot;name&quot;: &quot;${APP_NAME}:latest&quot;
                    }
                  }
                }
              ],
              &quot;replicas&quot;: 1,
              &quot;selector&quot;: {
                &quot;component&quot;: &quot;${APP_NAME}&quot;,
                &quot;deploymentconfig&quot;: &quot;${APP_NAME}&quot;,
                &quot;group&quot;: &quot;quickstarts&quot;,
                &quot;project&quot;: &quot;${APP_NAME}&quot;,
                &quot;provider&quot;: &quot;s2i&quot;,
                &quot;version&quot;: &quot;${APP_VERSION}&quot;
              },
              &quot;template&quot;: {
                &quot;metadata&quot;: {
                  &quot;creationTimestamp&quot;: null,
                  &quot;labels&quot;: {
                    &quot;component&quot;: &quot;${APP_NAME}&quot;,
                    &quot;deploymentconfig&quot;: &quot;${APP_NAME}&quot;,
                    &quot;group&quot;: &quot;quickstarts&quot;,
                    &quot;project&quot;: &quot;${APP_NAME}&quot;,
                    &quot;provider&quot;: &quot;s2i&quot;,
                    &quot;version&quot;: &quot;${APP_VERSION}&quot;
                  }
                },
                &quot;spec&quot;: {
                  &quot;containers&quot;: [
                    {
                      &quot;name&quot;: &quot;${APP_NAME}&quot;,
                      &quot;image&quot;: &quot;library/${APP_NAME}:latest&quot;,
                      &quot;readinessProbe&quot; : {
                        &quot;httpGet&quot; : {
                          &quot;path&quot; : &quot;/health&quot;,
                          &quot;port&quot; : 8081
                        },
                        &quot;initialDelaySeconds&quot; : 10
                      },
                      &quot;livenessProbe&quot; : {
                        &quot;httpGet&quot; : {
                          &quot;path&quot; : &quot;/health&quot;,
                          &quot;port&quot; : 8081
                        },
                        &quot;initialDelaySeconds&quot; : 180
                      },
                      &quot;ports&quot;: [
                        {
                          &quot;containerPort&quot;: 8778,
                          &quot;name&quot;: &quot;jolokia&quot;
                        }
                      ],
                      &quot;env&quot; : [ {
                        &quot;name&quot; : &quot;KUBERNETES_NAMESPACE&quot;,
                        &quot;valueFrom&quot; : {
                          &quot;fieldRef&quot; : {
                            &quot;fieldPath&quot; : &quot;metadata.namespace&quot;
                          }
                        }
                      } ],
                      &quot;resources&quot;: {
                        &quot;requests&quot;: {
                          &quot;cpu&quot;: &quot;${CPU_REQUEST}&quot;
                        },
                        &quot;limits&quot;: {
                          &quot;cpu&quot;: &quot;${CPU_LIMIT}&quot;
                        }
                      }
                    }
                  ]
                }
              }
            },
            &quot;status&quot;: {}
          }
        ]
      }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can see a demo of the OpenShift server adapter for Spring Boot application here:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;videoblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;support-for-route-timeouts-and-liveness-probe-for-openshift-server-adapter-debugging-configurations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#support-for-route-timeouts-and-liveness-probe-for-openshift-server-adapter-debugging-configurations&quot;&gt;&lt;/a&gt;Support for route timeouts and liveness probe for OpenShift Server Adapter debugging configurations&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;While debugging your OpenShift deployment, you may face two different issues:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;if you launch your test through a Web browser, then it’s likely that you will access your OpenShift deployment through an OpenShift
      route. The problem is that, by default, OpenShift routes have a 30 seconds timeout for each request. So if you’re stepping through one
      of your breakpoints, you will get a timeout error message in the browser window even if you can still debug your OpenShift deployment.
      And you’re now stuck will the navigation of your OpenShift application.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;if your OpenShift deployment has a liveness probe configured, depending on your virtual machine capabilities or how your debugger is
      configured, if your stepping into one of your breakpoints, the liveness probe may fail thus OpenShift so OpenShift will restart your
      container and your debugging session will be destroyed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So, from now, when the OpenShift server adapter is started in &lt;code&gt;debug&lt;/code&gt; mode, the following action are being performed:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;if an OpenShift route is found that is linked to the OpenShift deployment you want to debug, the route timeout will be
      set or increased to 1 hour. The original or default value will be restored when the OpenShift server adapter will be restarted
      in &lt;code&gt;run&lt;/code&gt; mode.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;if your OpenShift deployment has a liveness probe configured, the &lt;code&gt;initialDelay&lt;/code&gt; field will be increased to 1 hour if the defined
      value for this field is lower than 1 hour. If the value of this field is defined to a value greater than 1 hour, it is left intact.
      The original value will be restored when the OpenShift server adapter will be restarted
      in &lt;code&gt;run&lt;/code&gt; mode&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;enhanced-command-to-delete-resource-s&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#enhanced-command-to-delete-resource-s&quot;&gt;&lt;/a&gt;Enhanced command to delete resource(s)&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When it comes to delete OpenShift resources, you had two different choices:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;individually delete each resource but as some resources are hidden by the OpenShift explorer, it may become troublesome&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;delete the containing OpenShift project but you are then deleting more resources than required&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is now a new enhanced command to delete resources. It is available at the OpenShift project level and it will first
      list all the available OpenShift resources for the selected OpenShift project. You can now select the ones you want to delete
      and you can also filter the list using a filter that will be applied to the labels for each retrieved OpenShift resource.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So if you have two different deployments in a single OpenShift project (if you using OpenShift Online Starter for example) or if
      you have different kind of resources in a single deployment, you can now distinct them.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s see this in action:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In this example, I have deployed an EAP6.4 based application and an EAP7.0 based one. Here is what you  can see from the OpenShift explorer:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources explorer&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-explorer.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now, let’s invoke the new delete command on the &lt;em&gt;eap&lt;/em&gt; OpenShift project: right click the OpenShift project and select &lt;strong&gt;Delete Resources…​&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources dialog&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-dialog.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let suppose that we want to delete the EAP6.4 deployement. Enter &lt;em&gt;eap=6.4&lt;/em&gt; in the filter field:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources dialog1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-dialog1.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Push the &lt;strong&gt;Select All&lt;/strong&gt; button:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources dialog2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-dialog2.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Close this dialog by pushing the &lt;strong&gt;OK&lt;/strong&gt; button. The resources will be deleted and the OpenShift explorer will be updated accordingly:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;new delete resources explorer1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/openshift/images/new-delete-resources-explorer1.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eap-7-1-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eap-7-1-server-adapter&quot;&gt;&lt;/a&gt;EAP 7.1 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A server adapter has been added to work with EAP 7.1 and Wildfly 11. It’s based on WildFly 11. This new server adapter includes support for incremental management
      deployment like it’s upstream WildFly 11 counterpart.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-7-karaf-based-runtime-server-adapter&quot;&gt;&lt;/a&gt;Fuse 7 Karaf-based runtime Server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Fuse 7 is cooking and preliminary versions are already available on &lt;a href=&quot;http://origin-repository.jboss.org/nexus/content/groups/ea/org/jboss/fuse/jboss-fuse-karaf&quot;&gt;early-access repository&lt;/a&gt;. Fuse Tooling is ready to leverage them so that you can try the upcoming major Fuse version.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse 7 Server Adapter&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/Fuse7-ServerAdapter.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Classical functionalities with server adapters are available: automatic redeploy, Java debug, Graphical Camel debug through created JMX connection.
      Please note:
      - you can’t retrieve the Fuse 7 Runtime yet directly from Fuse tooling, it is required to download it on your machine and point to it when creating the Server adapter.
      - the provided templates requires some modifications to have them working with Fuse 7, mainly adapting the bom. Please see work related to it in this &lt;a href=&quot;https://issues.jboss.org/browse/FUSETOOLS-2578&quot;&gt;JIRA task&lt;/a&gt; and its children.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#display-routes-defined-inside-routecontext-in-camel-graphical-editor-design-tab&quot;&gt;&lt;/a&gt;Display routes defined inside &quot;routeContext&quot; in Camel Graphical Editor (Design tab)&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&quot;routeContext&quot; tag is a special tag used in Camel to provide the ability to reuse routes and to split them across different files. This is very useful on large projects. See Camel &lt;a href=&quot;http://camel.apache.org/how-do-i-import-routes-from-other-xml-files.html&quot;&gt;documentation&lt;/a&gt; for more information.
      Since this version, the Design of the routes defined in &quot;routeContext&quot; tags are now displayed.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#usability-improvement-progress-bar-when-changing-the-camel-version&quot;&gt;&lt;/a&gt;Usability improvement: Progress bar when &quot;Changing the Camel version&quot;&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since Fuse Tooling 10.1.0, it is possible to change the Camel version. In case the Camel version was not cached locally yet and for slow internet connections, this operation can take a while. There is now a progress bar to see the progress.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Switch Camel Version with Progress Bar&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/switchCamelVersionWithProgressBar.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;support-for-creating-fuse-ignite-technical-extensions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#support-for-creating-fuse-ignite-technical-extensions&quot;&gt;&lt;/a&gt;Support for creating Fuse Ignite Technical Extensions&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We are happy to announce the addition of support for creating Technical Extension projects for &lt;strong&gt;Fuse Ignite&lt;/strong&gt;*. That includes the creation of the project using the &lt;em&gt;&quot;New Fuse Ignite Extension Project&quot;&lt;/em&gt; wizard as well as support for building the deployable artifact directly from inside the Eclipse environment.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;em&gt;*&lt;strong&gt;Fuse Ignite&lt;/strong&gt; is a JBoss Fuse feature that provides a web interface for integrating applications. Without writing code, a business expert can use Ignite to connect to applications and optionally operate on data between connections to different applications. In Ignite, a data operation is referred to as a step in an integration.
      Ignite provides steps for operations such as filtering and mapping data. To operate on data in ways that are not provided by Ignite built-in steps, you can develop an Ignite extension to define one or more custom steps.
      Fuse Ignite comes as part of &lt;a href=&quot;https://developers.redhat.com/products/fuse/overview/&quot;&gt;Fuse&lt;/a&gt; and &lt;a href=&quot;https://www.redhat.com/en/explore/fuse-online&quot;&gt;Fuse Online&lt;/a&gt;. Please refer to the &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_fuse/6.3/html-single/tooling_user_guide/#IgniteExtension&quot;&gt;online documentation&lt;/a&gt; for more information on how to create and configure technical extensions for Fuse Ignite.&lt;/em&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Ignite Technical Extension Wizard&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/igniteExtensionWizard.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The provided project template allows you to define an &lt;a href=&quot;http://camel.apache.org&quot;&gt;Apache Camel&lt;/a&gt; route as the base flow of your new technical extension.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Ignite Technical Extension Route&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/igniteExtensionRoute.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To configure your new technical extension you can use the JSON file created with the new project.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Ignite Technical Extension Configuration&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/igniteExtensionConfig.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;forge-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-tools&quot;&gt;&lt;/a&gt;Forge Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;forge-runtime-updated-to-3-8-1-final&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#forge-runtime-updated-to-3-8-1-final&quot;&gt;&lt;/a&gt;Forge Runtime updated to 3.8.1.Final&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The included Forge runtime is now 3.8.1.Final. Read the official announcement &lt;a href=&quot;http://forge.jboss.org/news/jboss-forge-3.8.1.final-is-here&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.5.2.Final.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.5.2 and Developer Studio 11.2 out we are already working on the next maintenance release for Eclipse Oxygen.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 29 Jan 2018 07:07:14 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: What makes a good C++ IDE?</title>
	<guid isPermaLink="false">https://cdtdoug.ca/tag/eclipse/rss/5a6d3cee3ad93a43a56d3ae4</guid>
	<link>https://cdtdoug.ca/what-makes-a-good-c-ide/</link>
	<description>&lt;div class=&quot;kg-card-markdown&quot;&gt;&lt;img alt=&quot;What makes a good C++ IDE?&quot; src=&quot;https://cdtdoug.ca/content/images/2018/01/cdt_screenshot.png&quot; /&gt;&lt;p&gt;When I started working on C code many years ago, I was a big fan of emacs. It didn't have the weird modes that vi did. You just typed and code showed up. emacs has a rich extension system, if you don't mind writing LISP code, and soon we had fancy features such as running builds and navigating through compile errors. There's even a gdb integration that gives you what you need to debug your program. And then along came ctags and we started getting source navigation.&lt;/p&gt;
&lt;p&gt;But what was good for C started to fade with C++. We also started bringing in code coverage and profiling tools and even modeling and code generation tools. Simple editors like emacs couldn't keep up. We needed much more powerful platforms that provided a richer environment for tools as well as the promise of standard interfaces that allowed us to integrate tools to provide functionality greater than the whole. The IDE was born.&lt;/p&gt;
&lt;p&gt;But somewhere along the way it seems we failed. We didn't provide enough value that warranted the opinionated structures that IDEs enforce that enable the standard APIs to work. As I've stated many times, we have paid dearly with Eclipse trying to force C/C++ projects into the Eclipse resource system. What is a project in C/C++ world? Are projects the root of a recursive make tree, or the individual nodes that represent executable things and libraries? Neither works well, especially in complex systems embedded systems developers are building.&lt;/p&gt;
&lt;p&gt;So after years of trying to convert die hards and working hard to support those who want to use our IDEs, we need to take a step back try again. Get back to emacs, or more modern editors like Visual Studio Code, and see how we can bring our users forward again. This time we need to do it in a way that doesn't enforce a paradigm on them yet provides a path back towards the valuable features we can provide through integration.&lt;/p&gt;
&lt;p&gt;Anyway, that was a long preamble towards the real topic of this post, remembering what made CDT successful and providing at least that first step forward. What is the minimal feature set that meets expectations of today's developers. As I was using Visual Studio Code to hack Visual Studio Code, you get a real sense of what that is. You also get a good sense at what's missing from these editors.&lt;/p&gt;
&lt;p&gt;First of all is source navigation, being able to control click to find definitions of symbols and to be able to search for references to them. And, of course, along with that comes content assist. I spent most of my early years on CDT figuring out how to do this properly and quickly. For those that remember, the quickly took a long time and in the end exchanging perfect answers for speed was our path to success. To make this work we hand built C and C++ parsers that referenced a symbol database called the index. You also need to know the toolchain and build system to know how the code is built to do a reasonable job at it. Integration with the build system is a must.&lt;/p&gt;
&lt;p&gt;It's hard to imagine how editors like VS Code can be a good CDT replacement without replicating the magic. I'm not convinced the current front runner clangd and it's use of the clang parser which has perfection as it's number one requirement, will get us there without a lot of hacking. And editors usually don't deal with builds other than to invoke them and give you error navigation to feed it the info it needs.&lt;/p&gt;
&lt;p&gt;And I'm not even touching on launching where you really need to match build configs with launch configs to make sure launches do what you want. So while editors are all the rage right now because they are lightweight and flexible, users still expect them to more than the editors of old. It will be an interesting challenge for those who go that road to walk that balancing line. If you get it right though, I can imagine a lot of happy users.&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Sun, 28 Jan 2018 18:31:34 +0000</pubDate>
</item>

</channel>
</rss>
